// This file is auto-generated by @hey-api/openapi-ts

export namespace experimental_Pages {
  export type AddPageVersionInput = {
    /**
     * The language of the new page version.
     * Example value: en-US
     */
    language?: string | null;
    /**
     * The site name.
     * Example value: my-site
     */
    site?: string | null;
    /**
     * The base version number to create the new version from.
     * Example value: 1
     */
    baseVersion?: number | null;
    /**
     * The name of the new version.
     * Example value: Black Friday content update
     */
    versionName?: string | null;
  };
  export type CreatePageInput = {
    /**
     * The identifier of the parent page.
     * Example value: 9100b830-c85b-459b-9c37-51da74fc9ecc
     */
    parentId: string;
    /**
     * The system name of the new page.
     * Example value: about-us
     */
    pageName: string;
    /**
     * The identifier of the template to be used for the new page.
     * Example value: 2341ef32-42f4-4537-98d8-9ef741008eab
     */
    templateId: string;
    /**
     * The language of the new page.
     * Example value: en-US
     */
    language: string;
    /**
     * The display name of the new page.
     * Example value: About Us
     */
    displayName?: string | null;
  };
  export type DeletePageInput = {
    /**
     * Whether the page should be permanently deleted (skipping the recycle bin).
     * Example value: True
     */
    permanently?: boolean;
    /**
     * Whether the page should be forcefully deleted (skipping the references check).
     * Example value: True
     */
    forceDelete?: boolean;
  };
  export type DuplicatePageInput = {
    /**
     * The name for the new page.
     * Example value: About Us Copy
     */
    newName: string;
    /**
     * The site name.
     * Example value: my-site
     */
    site: string;
    /**
     * The language of the duplicated page.
     * Example value: en-US
     */
    language: string;
    /**
     * The display name for the new page.
     * Example value: About Us Copy
     */
    displayName?: string | null;
  };
  /**
   * The type of layout (Final or Shared).
   */
  export type LayoutKind = 'Final' | 'Shared';
  /**
   * The type of layout (Final or Shared).
   */
  export const LayoutKind = {
    FINAL: 'Final',
    SHARED: 'Shared',
  } as const;
  export type Page = {
    /**
     * The page URL path.
     * Example value: /about
     */
    url?: string | null;
    /**
     * Path to the icon associated with the page.
     * Example value: Applications/32x32/document_heart.png
     */
    icon?: string | null;
    /**
     * The name of the page version.
     * Example value: Black Friday content update
     */
    versionName?: string | null;
    /**
     * The revision of the page.
     * Example value: f7d29433-001e-4a35-a744-876759dba468
     */
    revision?: string | null;
    /**
     * The date the page was created.
     * Example value: 2025-01-27T10:33:33Z
     */
    createdAt?: string | null;
    /**
     * The date the page was last updated.
     * Example value: 2025-01-27T10:39:02Z
     */
    updatedAt?: string | null;
    /**
     * The user who created the page.
     * Example value: john.doe@sitecore.com
     */
    createdBy?: string | null;
    /**
     * The user who last updated the page.
     * Example value: john.doe@sitecore.com
     */
    updatedBy?: string | null;
    template?: PageTemplate;
    workflow?: PageWorkflow;
    publishing?: Publishing;
    /**
     * The final layout of the page.
     * Example value: {\"devices\":[{\"id\":\"fe5d7fdf-89c0-4d99-9aa3-b5fbd009c9f3\",\"layoutId\":\"96e5f4ba-a2cf-4a4c-a4e7-64da88226362\",\"placeholders\":[],\"renderings\":[{\"id\":\"9c6d53e3-fe57-4638-af7b-6d68304c7a94\",\"instanceId\":\"ad5e15fb-896b-4415-8735-5e4d6b1543e1\",\"placeholderKey\":\"headless-main\",\"dataSource\":\"local:/Data/Text 1\",\"parameters\":{\"GridParameters\":\"{7465D855-992E-4DC2-9855-A03250DFA74B}\",\"FieldNames\":\"{940B57D1-13EA-429D-8C7E-2F6C1307B1B1}\",\"Styles\":\"\",\"RenderingIdentifier\":\"\",\"CSSStyles\":\"\",\"DynamicPlaceholderId\":\"1\"}}]}]}
     */
    finalLayout?: string | null;
    /**
     * The shared layout of the page.
     * Example value: {\"devices\":[{\"id\":\"fe5d7fdf-89c0-4d99-9aa3-b5fbd009c9f3\",\"layoutId\":\"96e5f4ba-a2cf-4a4c-a4e7-64da88226362\",\"placeholders\":[],\"renderings\":[]}]}
     */
    sharedLayout?: string | null;
    /**
     * The type of layout for editing (Shared of Final).
     * Example value: Final
     */
    layoutEditingKind?: string | null;
    /**
     * The page identifier.
     * Example value: 68900348a3b84eb8ac7df4d179c25727
     */
    id?: string | null;
    /**
     * The page's system name.
     * Example value: Home
     */
    name?: string | null;
    /**
     * The page's display name.
     * Example value: Site Home
     */
    displayName?: string | null;
    /**
     * The page language.
     * Example value: en-US
     */
    language?: string | null;
    /**
     * The current version of the page.
     * Example value: 1
     */
    version?: number;
    /**
     * The identifier of the template this page is based on.
     * Example value: 6fe7d6551e3d4c2780105777f06c6c4f
     */
    templateId?: string | null;
    /**
     * The identifier of the page's parent.
     * Example value: 4bc0c81a280b4b13890b7b074b9d68f4
     */
    parentId?: string | null;
    /**
     * If set to true, this page can be rendered in the XM Cloud Pages application. This value is automatically set to false for the root item of the site, as well as for the folders if there are any.
     * Example value: True
     */
    hasPresentation?: boolean;
    /**
     * Whether the page has any child pages.
     * Example value: True
     */
    hasChildren?: boolean;
    /**
     * Whether the page version is latest publishable version
     * Example value: True
     */
    isLatestPublishableVersion?: boolean;
    permissions?: Permissions;
    locking?: PageLocking;
    /**
     * The path for the page.
     * Example value: Sitecore/Content/Home/Categories/Products/MyProduct
     */
    path?: string | null;
    /**
     * The public-facing URL path relative to the site's root.
     * Example value: /Aboutus
     */
    route?: string | null;
  };
  export type PageField = {
    /**
     * The name of the field.
     * Example value: Title
     */
    name?: string | null;
    /**
     * The raw value of the field. While this is passed as a string, it can represent more complex values.
     * Example value: Welcome to our site
     */
    value?: string | null;
  };
  export type PageFieldValue = {
    /**
     * The identifier of the field.
     * Example value: field-id-123
     */
    id?: string | null;
    /**
     * The current value of the field.
     * Example value: Hello World
     */
    value?: string | null;
    /**
     * The original value of the field before any changes, useful for comparison or rollback scenarios.
     * Example value: Original Text
     */
    originalValue?: string | null;
    /**
     * Whether the field value should be reset to its default state.
     * Example value: False
     */
    reset?: boolean;
  };
  export type PageFieldValueResult = {
    /**
     * The identifier of the field.
     * Example value: a73d057e-20e3-4ac3-9c06-5f34bfcb6847
     */
    id?: string | null;
    /**
     * The new value of the field.
     * Example value: Welcome to our site
     */
    value?: string | null;
    /**
     * The original value of the field.
     * Example value: Welcome
     */
    originalValue?: string | null;
    /**
     * The field reset status.
     * Example value: False
     */
    reset?: boolean;
  };
  export type PageInsertOption = {
    /**
     * Template ID
     * Example value: 6fe7d655-1e3d-4c27-8010-5777f06c6c4f
     */
    id?: string | null;
    /**
     * Template display name
     * Example value: Page
     */
    displayName?: string | null;
  };
  export type PageLayout = {
    kind?: LayoutKind;
    /**
     * The body of the layout.
     * Example value: {"devices":[{"id":"fe5d7fdf-89c0-4d99-9aa3-b5fbd009c9f3","layoutId":"96e5f4ba-a2cf-4a4c-a4e7-64da88226362","placeholders":[],"renderings":[{"id":"9c6d53e3-fe57-4638-af7b-6d68304c7a94","instanceId":"ad5e15fb-896b-4415-8735-5e4d6b1543e1","placeholderKey":"headless-main","dataSource":"local:/Data/Text 1","parameters":{"GridParameters":"{7465D855-992E-4DC2-9855-A03250DFA74B}","FieldNames":"{940B57D1-13EA-429D-8C7E-2F6C1307B1B1}","Styles":"","RenderingIdentifier":"","CSSStyles":"","DynamicPlaceholderId":"1"}}]}]}
     */
    body?: string | null;
  };
  export type PageLocking = {
    /**
     * Whether the current user can unlock the page for editing.
     * Example value: False
     */
    canUnlock?: boolean;
    /**
     * Whether the page is currently locked for editing.
     * Example value: False
     */
    isLocked?: boolean;
    /**
     * If the page is locked, the user who locked it.
     * Example value: john.smith@skate-park.com
     */
    lockedBy?: string | null;
    /**
     * Whether the page was locked by the current user.
     * Example value: False
     */
    lockedByCurrentUser?: boolean;
  };
  export type PageOperationResult = {
    /**
     * The page identifier.
     * Example value: 8f0b81bc-7388-46be-b109-6e73d1114470
     */
    pageId?: string | null;
    /**
     * The system name of the page.
     * Example value: Home
     */
    name?: string | null;
    /**
     * The display name of the page.
     * Example value: Site Home
     */
    displayName?: string | null;
    /**
     * The path of the page.
     * Example value: /sitecore/content/collection01/site01/Home/about
     */
    path?: string | null;
  };
  export type PageState = {
    /**
     * The page identifier.
     * Example value: 8f0b81bc-7388-46be-b109-6e73d1114470
     */
    id?: string | null;
    /**
     * The display name of the page.
     * Example value: Site Home
     */
    displayName?: string | null;
    /**
     * The revision of the page.
     * Example value: f7d29433-001e-4a35-a744-876759dba468
     */
    revision?: string | null;
    workflow?: PageWorkflow;
    /**
     * The versions of the page.
     */
    versions?: Array<Page> | null;
    /**
     * The final layout of the page.
     * Example value: {\"devices\":[{\"id\":\"fe5d7fdf-89c0-4d99-9aa3-b5fbd009c9f3\",\"layoutId\":\"96e5f4ba-a2cf-4a4c-a4e7-64da88226362\",\"placeholders\":[],\"renderings\":[{\"id\":\"9c6d53e3-fe57-4638-af7b-6d68304c7a94\",\"instanceId\":\"ad5e15fb-896b-4415-8735-5e4d6b1543e1\",\"placeholderKey\":\"headless-main\",\"dataSource\":\"local:/Data/Text 1\",\"parameters\":{\"GridParameters\":\"{7465D855-992E-4DC2-9855-A03250DFA74B}\",\"FieldNames\":\"{940B57D1-13EA-429D-8C7E-2F6C1307B1B1}\",\"Styles\":\"\",\"RenderingIdentifier\":\"\",\"CSSStyles\":\"\",\"DynamicPlaceholderId\":\"1\"}}]}]}
     */
    finalLayout?: string | null;
    /**
     * The shared layout of the page.
     * Example value: {\"devices\":[{\"id\":\"fe5d7fdf-89c0-4d99-9aa3-b5fbd009c9f3\",\"layoutId\":\"96e5f4ba-a2cf-4a4c-a4e7-64da88226362\",\"placeholders\":[],\"renderings\":[]}]}
     */
    sharedLayout?: string | null;
    /**
     * The kind of layout for editing (Shared of Final).
     * Example value: Final
     */
    layoutEditingKind?: string | null;
  };
  export type PageTemplate = {
    /**
     * The identifier of the page template.
     * Example value: 2341ef32-42f4-4537-98d8-9ef741008eab
     */
    id?: string | null;
    /**
     * The name of the page template.
     * Example value: MainPage
     */
    name?: string | null;
    /**
     * The path of the page template.
     * Example value: /sitecore/templates/Standard Template
     */
    path?: string | null;
    /**
     * The identifiers of the base templates.
     * Example value: [
     * "4cf51e95-ee7e-4ad6-a69f-e4d740b03616",
     * "d9584f11-07d3-4cda-8373-7f97ceedbc09"
     * ]
     */
    baseTemplateIds?: Array<string> | null;
    /**
     * The display name of the page template.
     * Example value: Main Page
     */
    displayName?: string | null;
    /**
     * Whether the template is a branch template.
     * Example value: True
     */
    isBranchTemplate?: boolean;
  };
  export type PageValidationError = {
    /**
     * Whether the operation was aborted.
     * Example value: true
     */
    aborted?: string | null;
    /**
     * The level of the error.
     * Example value: High
     */
    errorLevel?: string | null;
    /**
     * The error message.
     * Example value: Field value is required.
     */
    errorMessage?: string | null;
    /**
     * The identifier of the field that caused the error.
     * Example value: a73d057e-20e3-4ac3-9c06-5f34bfcb6847
     */
    fieldId?: string | null;
  };
  export type PageVersionInfo = {
    /**
     * The identifier of the page.
     * Example value: 8f0b81bc-7388-46be-b109-6e73d1114470
     */
    pageId?: string | null;
    /**
     * The display name of the page.
     * Example value: Site Home
     */
    displayName?: string | null;
    /**
     * The version number of the page.
     * Example value: 2
     */
    versionNumber?: number;
  };
  export type PageWorkflow = {
    /**
     * The identifier of the workflow state.
     * Example value: 77ac7ce9-803a-42e3-bb05-f79fca73cbce
     */
    id?: string | null;
    /**
     * The display name of the workflow.
     * Example value: Page Workflow
     */
    displayName?: string | null;
    /**
     * Whether the page is in the final workflow state.
     * Example value: True
     */
    finalState?: boolean;
    /**
     * Whether the page can be edited.
     * Example value: True
     */
    canEdit?: boolean;
    /**
     * The list of warnings associated with the workflow.
     */
    warnings?: Array<WorkflowWarning> | null;
    /**
     * Path to the icon associated with the workflow.
     * Example value: Applications/32x32/document_heart.png
     */
    icon?: string | null;
    /**
     * The list of commands available in the current workflow state.
     */
    commands?: Array<WorkflowCommand> | null;
  };
  /**
   * The result of a page search, including the total count and a collection of result pages.
   */
  export type PagesSearchResult = {
    /**
     * The total number of pages found by the search.
     * Example value: 25
     */
    totalCount?: number;
    /**
     * The collection of result pages returned by the search.
     */
    results?: Array<Page> | null;
  };
  /**
   * The access rights of the current user to the site.
   */
  export type Permissions = {
    /**
     * Whether the current user has admin rights. Being an admin means that you control access permissions for other users, and have full read and write rights.
     * Example value: False
     */
    canAdmin?: boolean;
    /**
     * Whether the current user has permissions to edit values. Users with write access also have read access.
     * Example value: False
     */
    canWrite?: boolean;
    /**
     * Whether the current user has permission to create entities.
     * Example value: False
     */
    canCreate?: boolean;
    /**
     * Whether the current user has permission to delete entities.
     * Example value: False
     */
    canDelete?: boolean;
    /**
     * Whether the current user has permission to rename entities.
     * Example value: False
     */
    canRename?: boolean;
    /**
     * Whether the current user has permission to see entities, including all their parameters.
     * Example value: False
     */
    canRead?: boolean;
    /**
     * Whether the current user has permission to publish sites in this environment.
     * Example value: False
     */
    canPublish?: boolean;
    /**
     * Whether the current user has permission to duplicate entities.
     * Example value: False
     */
    canDuplicate?: boolean;
    /**
     * Whether the current user has permission to write item language entities.
     * Example value: False
     */
    canWriteLanguage?: boolean;
  };
  export type ProblemDetails = {
    /**
     * The type of the error response entity.
     */
    type?: string | null;
    /**
     * The title of the error response entity.
     */
    title?: string | null;
    /**
     * The response status code.
     */
    status?: number | null;
    /**
     * A detailed explanation, specific to this occurrence of the problem.
     */
    detail?: string | null;
    /**
     * If available, a URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | null;
    [key: string]:
      | unknown
      | (string | null)
      | (string | null)
      | (number | null)
      | (string | null)
      | (string | null)
      | undefined;
  };
  export type Publishing = {
    /**
     * Whether the page is publishable.
     * Example value: True
     */
    isPublishable?: boolean;
    /**
     * Whether the page has a publishable version.
     * Example value: True
     */
    hasPublishableVersion?: boolean;
    /**
     * Whether the page version is available to publish (version is not hidden).
     * Example value: True
     */
    isAvailableToPublish?: boolean;
    /**
     * The date from which the page is available for publishing.
     * Example value: 2023-10-01T00:00:00Z
     */
    validFromDate?: string | null;
    /**
     * The date until which the page is available for publishing.
     * Example value: 2023-12-31T23:59:59Z
     */
    validToDate?: string | null;
  };
  export type RenamePageInput = {
    /**
     * The new name for the page.
     * Example value: About Us
     */
    newName: string;
  };
  export type SavePageError = {
    /**
     * The error code.
     * Example value: ItemIsProtected
     */
    errorCode?: string | null;
    /**
     * The error message.
     * Example value: The page item is protected.
     */
    message?: string | null;
    /**
     * The identifier of the page that caused the error.
     * Example value: 8f0b81bc-7388-46be-b109-6e73d1114470
     */
    pageId?: string | null;
  };
  export type SavePageFieldsInput = {
    /**
     * The field values for the page.
     */
    fields: Array<PageFieldValue>;
    /**
     * The language of the page to save.
     * Example value: en-US
     */
    language: string;
    /**
     * The site name.
     * Example value: my-site
     */
    site: string;
    /**
     * The version number of the page to save.
     * Example value: 2
     */
    pageVersion?: number;
    /**
     * The revision identifier of the page to save.
     * Example value: f7d29433-001e-4a35-a744-876759dba468
     */
    revision?: string | null;
  };
  export type SavePageLayoutInput = {
    layout: PageLayout;
    originalLayout?: PageLayout;
    /**
     * The language of the page to save.
     * Example value: en-US
     */
    language: string;
    /**
     * The site name.
     * Example value: my-site
     */
    site: string;
    /**
     * The version number of the page to save.
     * Example value: 2
     */
    pageVersion?: number;
    /**
     * The revision identifier of the page to save.
     * Example value: f7d29433-001e-4a35-a744-876759dba468
     */
    revision?: string | null;
  };
  export type SavePageResult = {
    /**
     * The list of errors that occurred during the save operation.
     */
    errors?: Array<SavePageError> | null;
    savedPage?: SavedPage;
    /**
     * The list of validation errors that occurred during the save operation.
     */
    validationErrors?: Array<PageValidationError> | null;
    /**
     * The list of warnings that occurred during the save operation.
     */
    warnings?: Array<string> | null;
    newCreatedVersion?: PageVersionInfo;
  };
  export type SavedPage = {
    /**
     * The list of updated field values.
     */
    fields?: Array<PageFieldValueResult> | null;
    /**
     * The identifier of the saved page.
     * Example value: 8f0b81bc-7388-46be-b109-6e73d1114470
     */
    id?: string | null;
    /**
     * The language of the saved page.
     * Example value: en-US
     */
    language?: string | null;
    /**
     * The revision identifier of the saved page.
     * Example value: f7d29433-001e-4a35-a744-876759dba468
     */
    revision?: string | null;
    /**
     * The version number of the saved page.
     * Example value: 2
     */
    version?: number;
  };
  /**
   * The search filter type.
   */
  export type TypeFilter = 'Pages' | 'Folders' | 'All';
  /**
   * The search filter type.
   */
  export const TypeFilter = {
    PAGES: 'Pages',
    FOLDERS: 'Folders',
    ALL: 'All',
  } as const;
  export type UpdatePageInput = {
    /**
     * The version number of the page to update.
     * Example value: 2
     */
    versionNumber?: number | null;
    /**
     * The language of the page to update.
     * Example value: en-US
     */
    language?: string | null;
    /**
     * The fields to update on the page.
     */
    fields: Array<PageField>;
  };
  export type WorkflowCommand = {
    /**
     * The identifier of the workflow command.
     * Example value: cf6a557d-0b86-4432-bf47-302a18238e74
     */
    id?: string | null;
    /**
     * The display name of the workflow command.
     * Example value: Submit
     */
    displayName?: string | null;
    /**
     * The icon associated with the workflow command.
     * Example value: office/16x16/submit.png
     */
    icon?: string | null;
  };
  export type WorkflowWarning = {
    /**
     * The identifier of the page on which the warning occurred.
     * Example value: 8f0b81bc-7388-46be-b109-6e73d1114470
     */
    id?: string | null;
    /**
     * The error code of the warning.
     * Example value: SomeDatasourcesAreLocked
     */
    errorCode?: string | null;
    /**
     * The warning message.
     * Example value: Some of the page datasources are locked.
     */
    message?: string | null;
  };
  export type DeletePageData = {
    body?: DeletePageInput;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query?: {
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}';
  };
  export type DeletePageErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type DeletePageError = DeletePageErrors[keyof DeletePageErrors];
  export type DeletePageResponses = {
    /**
     * Success
     */
    200: boolean;
  };
  export type DeletePageResponse = DeletePageResponses[keyof DeletePageResponses];
  export type RetrievePageData = {
    body?: never;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query: {
      /**
       * The site identifier.
       */
      site: string;
      /**
       * The page language.
       */
      language: string;
      /**
       * The page version number.
       */
      version?: number;
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}';
  };
  export type RetrievePageErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type RetrievePageError = RetrievePageErrors[keyof RetrievePageErrors];
  export type RetrievePageResponses = {
    /**
     * Success
     */
    200: Page;
  };
  export type RetrievePageResponse = RetrievePageResponses[keyof RetrievePageResponses];
  export type UpdateFieldsData = {
    /**
     * Input data containing page field values
     */
    body?: UpdatePageInput;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query?: {
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}';
  };
  export type UpdateFieldsErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type UpdateFieldsError = UpdateFieldsErrors[keyof UpdateFieldsErrors];
  export type UpdateFieldsResponses = {
    /**
     * Success
     */
    200: PageOperationResult;
  };
  export type UpdateFieldsResponse = UpdateFieldsResponses[keyof UpdateFieldsResponses];
  export type RetrievePageStateData = {
    body?: never;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query: {
      /**
       * The site name.
       */
      Site: string;
      /**
       * The language of the page.
       */
      Language: string;
      /**
       * The version number of the page.
       */
      Version?: number;
      /**
       * Whether to include workflow information.
       */
      WithWorkflow?: boolean;
      /**
       * Whether to include page versions.
       */
      WithVersions?: boolean;
      /**
       * Whether to include layout information.
       */
      WithLayout?: boolean;
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/state';
  };
  export type RetrievePageStateErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type RetrievePageStateError = RetrievePageStateErrors[keyof RetrievePageStateErrors];
  export type RetrievePageStateResponses = {
    /**
     * Success
     */
    200: PageState;
  };
  export type RetrievePageStateResponse =
    RetrievePageStateResponses[keyof RetrievePageStateResponses];
  export type SearchData = {
    body?: never;
    path?: never;
    query?: {
      /**
       * The text by which to search for the name or display name.
       */
      searchText?: string;
      /**
       * If you want to limit the search to pages or folders under a specific parent, the list of identifiers to search under.
       */
      rootIds?: Array<string>;
      /**
       * The search filter. Possible values are "Pages" (items that have a presentation layout and can be rendered), "Folders" (items that use 'folder' as their base template), "All" (both pages and folders).
       */
      filter?: TypeFilter;
      /**
       * If you want to limit the search to items in a specific language, the language code of those items.
       */
      language?: string;
      /**
       * The page size of the results to return.
       */
      pageSize?: number;
      /**
       * The page number used to paginate the results.
       */
      pageNumber?: number;
      /**
       * Continuation token for pagination.
       */
      continuationToken?: string;
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/search';
  };
  export type SearchErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
    /**
     * Search service unavailable
     */
    503: unknown;
  };
  export type SearchError = SearchErrors[keyof SearchErrors];
  export type SearchResponses = {
    /**
     * Success
     */
    200: PagesSearchResult;
  };
  export type SearchResponse = SearchResponses[keyof SearchResponses];
  export type RetrieveInsertOptionsData = {
    body?: never;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query: {
      /**
       * The site identifier.
       */
      site: string;
      /**
       * The page language.
       */
      language: string;
      /**
       * The type of object to retrieve (Page or Folder).
       */
      insertOptionKind: string;
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/insertoptions';
  };
  export type RetrieveInsertOptionsErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type RetrieveInsertOptionsError =
    RetrieveInsertOptionsErrors[keyof RetrieveInsertOptionsErrors];
  export type RetrieveInsertOptionsResponses = {
    /**
     * Success
     */
    200: Array<PageInsertOption>;
  };
  export type RetrieveInsertOptionsResponse =
    RetrieveInsertOptionsResponses[keyof RetrieveInsertOptionsResponses];
  export type RetrievePageVersionsData = {
    body?: never;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query: {
      /**
       * The site identifier.
       */
      site: string;
      /**
       * The page language.
       */
      language?: string;
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/versions';
  };
  export type RetrievePageVersionsErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type RetrievePageVersionsError =
    RetrievePageVersionsErrors[keyof RetrievePageVersionsErrors];
  export type RetrievePageVersionsResponses = {
    /**
     * Success
     */
    200: Array<Page>;
  };
  export type RetrievePageVersionsResponse =
    RetrievePageVersionsResponses[keyof RetrievePageVersionsResponses];
  export type AddPageVersionsData = {
    /**
     * Input data containing properties of the page
     */
    body?: AddPageVersionInput;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query?: {
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/versions';
  };
  export type AddPageVersionsErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type AddPageVersionsError = AddPageVersionsErrors[keyof AddPageVersionsErrors];
  export type AddPageVersionsResponses = {
    /**
     * Success
     */
    200: number;
  };
  export type AddPageVersionsResponse = AddPageVersionsResponses[keyof AddPageVersionsResponses];
  export type ListPageVariantsData = {
    body?: never;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query: {
      /**
       * The page language.
       */
      language: string;
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/live/variants';
  };
  export type ListPageVariantsErrors = {
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type ListPageVariantsError = ListPageVariantsErrors[keyof ListPageVariantsErrors];
  export type ListPageVariantsResponses = {
    /**
     * Success
     */
    200: Array<string>;
  };
  export type ListPageVariantsResponse = ListPageVariantsResponses[keyof ListPageVariantsResponses];
  export type GetLivePageStateData = {
    body?: never;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query: {
      /**
       * The page language.
       */
      language: string;
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/live';
  };
  export type GetLivePageStateErrors = {
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type GetLivePageStateError = GetLivePageStateErrors[keyof GetLivePageStateErrors];
  export type GetLivePageStateResponses = {
    /**
     * Success
     */
    200: unknown;
  };
  export type CreatePageData = {
    /**
     * Input data containing properties of the page
     */
    body?: CreatePageInput;
    path?: never;
    query?: {
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages';
  };
  export type CreatePageErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
  };
  export type CreatePageError = CreatePageErrors[keyof CreatePageErrors];
  export type CreatePageResponses = {
    /**
     * Success
     */
    200: PageOperationResult;
  };
  export type CreatePageResponse = CreatePageResponses[keyof CreatePageResponses];
  export type SaveLayoutData = {
    /**
     * Input data containing layout of the page
     */
    body?: SavePageLayoutInput;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query?: {
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/layout';
  };
  export type SaveLayoutErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type SaveLayoutError = SaveLayoutErrors[keyof SaveLayoutErrors];
  export type SaveLayoutResponses = {
    /**
     * Success
     */
    200: SavePageResult;
  };
  export type SaveLayoutResponse = SaveLayoutResponses[keyof SaveLayoutResponses];
  export type SaveFieldsData = {
    /**
     * Input data containing fields of the page
     */
    body?: SavePageFieldsInput;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query?: {
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/fields';
  };
  export type SaveFieldsErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type SaveFieldsError = SaveFieldsErrors[keyof SaveFieldsErrors];
  export type SaveFieldsResponses = {
    /**
     * Success
     */
    200: SavePageResult;
  };
  export type SaveFieldsResponse = SaveFieldsResponses[keyof SaveFieldsResponses];
  export type DuplicatePageData = {
    /**
     * Input data containing properties of the page
     */
    body?: DuplicatePageInput;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query?: {
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/duplicate';
  };
  export type DuplicatePageErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type DuplicatePageError = DuplicatePageErrors[keyof DuplicatePageErrors];
  export type DuplicatePageResponses = {
    /**
     * Success
     */
    200: PageOperationResult;
  };
  export type DuplicatePageResponse = DuplicatePageResponses[keyof DuplicatePageResponses];
  export type RenamePageData = {
    /**
     * Input data containing properties of the page
     */
    body?: RenamePageInput;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query?: {
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/rename';
  };
  export type RenamePageErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type RenamePageError = RenamePageErrors[keyof RenamePageErrors];
  export type RenamePageResponses = {
    /**
     * Success
     */
    200: PageOperationResult;
  };
  export type RenamePageResponse = RenamePageResponses[keyof RenamePageResponses];
  export type AddPageVersionData = {
    /**
     * Input data containing properties of the page for which to create a new version.
     */
    body?: AddPageVersionInput;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
    };
    query?: {
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/version';
  };
  export type AddPageVersionErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type AddPageVersionError = AddPageVersionErrors[keyof AddPageVersionErrors];
  export type AddPageVersionResponses = {
    /**
     * Success
     */
    200: number;
  };
  export type AddPageVersionResponse = AddPageVersionResponses[keyof AddPageVersionResponses];
  export type DeletePageVersionsData = {
    body?: never;
    path: {
      /**
       * The page identifier.
       */
      pageId: string;
      /**
       * The number of the version to delete.
       */
      versionNumber: number;
      /**
       * The language of the page version to delete.
       */
      language: string;
    };
    query?: {
      /**
       * The identifier of the environment.
       */
      environmentId?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/versions/{versionNumber}/{language}';
  };
  export type DeletePageVersionsErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Not found
     */
    404: ProblemDetails;
  };
  export type DeletePageVersionsError = DeletePageVersionsErrors[keyof DeletePageVersionsErrors];
  export type DeletePageVersionsResponses = {
    /**
     * Success
     */
    200: number;
  };
  export type DeletePageVersionsResponse =
    DeletePageVersionsResponses[keyof DeletePageVersionsResponses];
  export type ClientOptions = {
    baseUrl: 'https://xmapps-api.sitecorecloud.io' | (string & {});
  };
}
