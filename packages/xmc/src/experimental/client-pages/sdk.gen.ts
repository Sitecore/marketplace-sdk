// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { EXPERIMENTAL_Pages } from './types.gen';
import { client as _heyApiClient } from './client.gen';

type DeletePageVersionsError = EXPERIMENTAL_Pages.DeletePageVersionsError;

type DeletePageVersionsResponse = EXPERIMENTAL_Pages.DeletePageVersionsResponse;

type DeletePageVersionsData = EXPERIMENTAL_Pages.DeletePageVersionsData;

type AddPageVersionError = EXPERIMENTAL_Pages.AddPageVersionError;

type AddPageVersionResponse = EXPERIMENTAL_Pages.AddPageVersionResponse;

type AddPageVersionData = EXPERIMENTAL_Pages.AddPageVersionData;

type RenamePageError = EXPERIMENTAL_Pages.RenamePageError;

type RenamePageResponse = EXPERIMENTAL_Pages.RenamePageResponse;

type RenamePageData = EXPERIMENTAL_Pages.RenamePageData;

type DuplicatePageError = EXPERIMENTAL_Pages.DuplicatePageError;

type DuplicatePageResponse = EXPERIMENTAL_Pages.DuplicatePageResponse;

type DuplicatePageData = EXPERIMENTAL_Pages.DuplicatePageData;

type SaveFieldsError = EXPERIMENTAL_Pages.SaveFieldsError;

type SaveFieldsResponse = EXPERIMENTAL_Pages.SaveFieldsResponse;

type SaveFieldsData = EXPERIMENTAL_Pages.SaveFieldsData;

type SaveLayoutError = EXPERIMENTAL_Pages.SaveLayoutError;

type SaveLayoutResponse = EXPERIMENTAL_Pages.SaveLayoutResponse;

type SaveLayoutData = EXPERIMENTAL_Pages.SaveLayoutData;

type CreatePageError = EXPERIMENTAL_Pages.CreatePageError;

type CreatePageResponse = EXPERIMENTAL_Pages.CreatePageResponse;

type CreatePageData = EXPERIMENTAL_Pages.CreatePageData;

type GetLivePageStateError = EXPERIMENTAL_Pages.GetLivePageStateError;

type GetLivePageStateData = EXPERIMENTAL_Pages.GetLivePageStateData;

type ListPageVariantsError = EXPERIMENTAL_Pages.ListPageVariantsError;

type ListPageVariantsResponse = EXPERIMENTAL_Pages.ListPageVariantsResponse;

type ListPageVariantsData = EXPERIMENTAL_Pages.ListPageVariantsData;

type AddPageVersionsError = EXPERIMENTAL_Pages.AddPageVersionsError;

type AddPageVersionsResponse = EXPERIMENTAL_Pages.AddPageVersionsResponse;

type AddPageVersionsData = EXPERIMENTAL_Pages.AddPageVersionsData;

type RetrievePageVersionsError = EXPERIMENTAL_Pages.RetrievePageVersionsError;

type RetrievePageVersionsResponse = EXPERIMENTAL_Pages.RetrievePageVersionsResponse;

type RetrievePageVersionsData = EXPERIMENTAL_Pages.RetrievePageVersionsData;

type RetrieveInsertOptionsError = EXPERIMENTAL_Pages.RetrieveInsertOptionsError;

type RetrieveInsertOptionsResponse = EXPERIMENTAL_Pages.RetrieveInsertOptionsResponse;

type RetrieveInsertOptionsData = EXPERIMENTAL_Pages.RetrieveInsertOptionsData;

type SearchError = EXPERIMENTAL_Pages.SearchError;

type SearchResponse = EXPERIMENTAL_Pages.SearchResponse;

type SearchData = EXPERIMENTAL_Pages.SearchData;

type RetrievePageStateError = EXPERIMENTAL_Pages.RetrievePageStateError;

type RetrievePageStateResponse = EXPERIMENTAL_Pages.RetrievePageStateResponse;

type RetrievePageStateData = EXPERIMENTAL_Pages.RetrievePageStateData;

type UpdateFieldsError = EXPERIMENTAL_Pages.UpdateFieldsError;

type UpdateFieldsResponse = EXPERIMENTAL_Pages.UpdateFieldsResponse;

type UpdateFieldsData = EXPERIMENTAL_Pages.UpdateFieldsData;

type RetrievePageError = EXPERIMENTAL_Pages.RetrievePageError;

type RetrievePageResponse = EXPERIMENTAL_Pages.RetrievePageResponse;

type RetrievePageData = EXPERIMENTAL_Pages.RetrievePageData;

type DeletePageError = EXPERIMENTAL_Pages.DeletePageError;

type DeletePageResponse = EXPERIMENTAL_Pages.DeletePageResponse;

type DeletePageData = EXPERIMENTAL_Pages.DeletePageData;

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Delete a page
 * Deletes a page.
 */
export const deletePage = <ThrowOnError extends boolean = false>(
  options: Options<DeletePageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePageResponse,
    DeletePageError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Retrieve a page
 * Fetches information about a page (including statistics, template, layout, publishing and workflow information).
 */
export const retrievePage = <ThrowOnError extends boolean = false>(
  options: Options<RetrievePageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrievePageResponse,
    RetrievePageError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}',
    ...options,
  });
};

/**
 * Update field values
 * Updates values of existing fields for a specific page.
 */
export const updateFields = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFieldsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateFieldsResponse,
    UpdateFieldsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Retrieve a page state
 * Fetches basic information about a page (identifier, display name and revision) and optionally workflow, layout and version data.
 */
export const retrievePageState = <ThrowOnError extends boolean = false>(
  options: Options<RetrievePageStateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrievePageStateResponse,
    RetrievePageStateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/state',
    ...options,
  });
};

/**
 * Search for pages
 * Fetches a list of pages and folders whose name or display name match the search criteria, while applying filters and language options.
 */
export const search = <ThrowOnError extends boolean = false>(
  options?: Options<SearchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<SearchResponse, SearchError, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/search',
    ...options,
  });
};

/**
 * Retrieve insert options
 * Fetches the list of possible templates which are compatible insert options for a page.
 */
export const retrieveInsertOptions = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveInsertOptionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrieveInsertOptionsResponse,
    RetrieveInsertOptionsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/insertoptions',
    ...options,
  });
};

/**
 * Retrieve page versions
 * Fetches the list of page versions.
 */
export const retrievePageVersions = <ThrowOnError extends boolean = false>(
  options: Options<RetrievePageVersionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrievePageVersionsResponse,
    RetrievePageVersionsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/versions',
    ...options,
  });
};

/**
 * Add a version to a page
 * Creates a new version of a page.
 */
export const addPageVersions = <ThrowOnError extends boolean = false>(
  options: Options<AddPageVersionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AddPageVersionsResponse,
    AddPageVersionsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/versions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List live variant identifiers for a page
 * Fetches the identifiers of currently active personalization variants for a page.
 */
export const listPageVariants = <ThrowOnError extends boolean = false>(
  options: Options<ListPageVariantsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListPageVariantsResponse,
    ListPageVariantsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/live/variants',
    ...options,
  });
};

/**
 * Check if a page is published to Edge
 * Checks if the requested page is published to Edge.
 */
export const getLivePageState = <ThrowOnError extends boolean = false>(
  options: Options<GetLivePageStateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<unknown, GetLivePageStateError, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/live',
    ...options,
  });
};

/**
 * Create a page
 * Creates a new page.
 */
export const createPage = <ThrowOnError extends boolean = false>(
  options?: Options<CreatePageData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<CreatePageResponse, CreatePageError, ThrowOnError>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/v1/pages',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    },
  );
};

/**
 * Save a page layout
 * Updates the layout of a page.
 */
export const saveLayout = <ThrowOnError extends boolean = false>(
  options: Options<SaveLayoutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<SaveLayoutResponse, SaveLayoutError, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/layout',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Save page fields
 * Updates the fields of a page.
 */
export const saveFields = <ThrowOnError extends boolean = false>(
  options: Options<SaveFieldsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<SaveFieldsResponse, SaveFieldsError, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/fields',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Duplicate a page
 * Creates a copy of a page.
 */
export const duplicatePage = <ThrowOnError extends boolean = false>(
  options: Options<DuplicatePageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DuplicatePageResponse,
    DuplicatePageError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/duplicate',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Rename a page
 * Changes the name of a page.
 */
export const renamePage = <ThrowOnError extends boolean = false>(
  options: Options<RenamePageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<RenamePageResponse, RenamePageError, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/rename',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Add a page version
 * Creates a new version of a page.
 */
export const addPageVersion = <ThrowOnError extends boolean = false>(
  options: Options<AddPageVersionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AddPageVersionResponse,
    AddPageVersionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/version',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete a version of a page
 * Deletes the specified version of a page.
 */
export const deletePageVersions = <ThrowOnError extends boolean = false>(
  options: Options<DeletePageVersionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePageVersionsResponse,
    DeletePageVersionsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/pages/{pageId}/versions/{versionNumber}/{language}',
    ...options,
  });
};
