// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { EXPERIMENTAL_Content } from './types.gen';
import { client as _heyApiClient } from './client.gen';

type GraphqlResponse = EXPERIMENTAL_Content.GraphqlResponse;

type GraphqlData = EXPERIMENTAL_Content.GraphqlData;

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Execute a GraphQL query
 * Send a GraphQL query request to the Sitecore GraphQL API. Mutations are not supported by the Preview API and Delivery API.
 */
export const graphql = <ThrowOnError extends boolean = false>(
  options: Options<GraphqlData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<GraphqlResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/graphql/v1',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};
