// This file is auto-generated by @hey-api/openapi-ts

export const AddFavoriteSiteInputSchema = {
  required: ['favoriteSiteId'],
  type: 'object',
  properties: {
    favoriteSiteId: {
      minLength: 1,
      type: 'string',
      description: `The site identifier.
Example value: 110d559fdea542ea9c1c8a5df7e70ef9`,
      example: '110d559fdea542ea9c1c8a5df7e70ef9',
    },
  },
  additionalProperties: false,
  description: 'The details of the site to add to favorites.',
} as const;

export const AddFavoriteSiteTemplateInputSchema = {
  required: ['favoriteSiteTemplateId'],
  type: 'object',
  properties: {
    favoriteSiteTemplateId: {
      minLength: 1,
      type: 'string',
      description: `The site template identifier.
Example value: 5aae1eeaea2440bf96f11f43da82c77b`,
      example: '5aae1eeaea2440bf96f11f43da82c77b',
    },
  },
  additionalProperties: false,
  description: 'The details of the site template to add to favorites.',
} as const;

export const AddLanguageModelSchema = {
  required: ['languageCode'],
  type: 'object',
  properties: {
    charset: {
      type: 'string',
      description: `The character encoding, that specifies how characters are represented in a document or web page.
Example value: iso-8859-1`,
      nullable: true,
      example: 'iso-8859-1',
    },
    codePage: {
      type: 'string',
      description: `Code Page
Example value: 65001`,
      nullable: true,
      example: '65001',
    },
    customCode: {
      type: 'string',
      description: `If you wish to support a nonstandard country or region code, you can provide a custom language code.
Example value: en-EU`,
      nullable: true,
      example: 'en-EU',
    },
    database: {
      type: 'string',
      description: `Database
Example value: master`,
      nullable: true,
      example: 'master',
    },
    encoding: {
      type: 'string',
      description: `Encoding
Example value: utf-8`,
      nullable: true,
      example: 'utf-8',
    },
    languageCode: {
      minLength: 1,
      type: 'string',
      description: `The ISO code for the language.
Example value: en`,
      example: 'en',
    },
    name: {
      type: 'string',
      description: `The name that will be used for the language.
Example value: en-US`,
      nullable: true,
      example: 'en-US',
    },
    regionCode: {
      type: 'string',
      description: `The regional ISO code of the language. Example values: US for the USA, or DK for Denmark.
Example value: US`,
      nullable: true,
      example: 'US',
    },
    fallbackLanguage: {
      type: 'string',
      description: `If you wish to configure fallback for the new language, add the ISO language code for the fallback language.
Example value: en`,
      nullable: true,
      example: 'en',
    },
    spellChecker: {
      type: 'string',
      description: `A reference to the dictionary file name that you want to use to spellcheck in the new language.
Example value: en-US.tdf`,
      nullable: true,
      example: 'en-US.tdf',
    },
  },
  additionalProperties: false,
} as const;

export const AnalyticsIdentifierSchema = {
  required: ['language', 'name'],
  type: 'object',
  properties: {
    name: {
      minLength: 1,
      type: 'string',
      description: `The name of the analytics identifier.
Example value: skate-park`,
      example: 'skate-park',
    },
    language: {
      minLength: 1,
      type: 'string',
      description: `The language for the analytics identifier.
Example value: en`,
      example: 'en',
    },
  },
  additionalProperties: false,
  description: 'An Analytics tracker identifer for a site.',
} as const;

export const ComponentAggregationResponseSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `The component identifier.
Example value: 86a03271-dff4-470a-92bd-b68c67de2e25`,
      nullable: true,
      example: '86a03271-dff4-470a-92bd-b68c67de2e25',
    },
    uid: {
      type: 'string',
      description: `The unique identifier of the component on this page. The UID is assigned to the component when it's added to the page.
Example value: 3d42bec0-60ad-45f3-a8f7-ddb6a5543c34`,
      nullable: true,
      example: '3d42bec0-60ad-45f3-a8f7-ddb6a5543c34',
    },
    name: {
      type: 'string',
      description: `The component name.
Example value: RichText`,
      nullable: true,
      example: 'RichText',
    },
    displayName: {
      type: 'string',
      description: `The display name of the component for the specified language.
Example value: Rich Text`,
      nullable: true,
      example: 'Rich Text',
    },
  },
  additionalProperties: false,
} as const;

export const CopySiteInputSchema = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      maxLength: 50,
      minLength: 0,
      pattern: '^(?![\\s-])[a-zA-Z0-9_\\s-]*(?<!\\s)$',
      type: 'string',
      description: `Name for the new site.
Example value: skate-park`,
      default: 'string',
      example: 'skate-park',
    },
    displayName: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: `Display name for the new site.
Example value: Skate Park`,
      nullable: true,
      example: 'Skate Park',
    },
    description: {
      maxLength: 100,
      minLength: 0,
      type: 'string',
      description: `Description for the new site.
Example value: Sample showcase website description.`,
      nullable: true,
      example: 'Sample showcase website description.',
    },
    posMappings: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AnalyticsIdentifier',
      },
      description: 'Analytics identifiers for the new site.',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'A site duplication request.',
} as const;

export const CreateHostInputSchema = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      maxLength: 50,
      minLength: 0,
      pattern: '^(?![\\s-])[a-zA-Z0-9_\\s-]*(?<!\\s)$',
      type: 'string',
      description: `The name of the new host.
Example value: skate-park`,
      default: 'string',
      example: 'skate-park',
    },
    hostnames: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: `One or more hostnames.
Example value: [
  "dev.skate-park.com",
  "uat.skate-park.com"
]`,
      nullable: true,
      example: ['dev.skate-park.com', 'uat.skate-park.com'],
    },
    targetHostname: {
      type: 'string',
      description: `The target hostname.
Example value: www.skate-park.com`,
      nullable: true,
      example: 'www.skate-park.com',
    },
    renderingHost: {
      type: 'string',
      description: `The rendering host.
Example value: Default`,
      nullable: true,
      example: 'Default',
    },
    homePageId: {
      pattern:
        '(?i)^(?:[({][0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12}[)}]|[0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12})$',
      type: 'string',
      description: `The identifier of the home page.
Example value: 110d559fdea542ea9c1c8a5df7e70ef9`,
      nullable: true,
      example: '110d559fdea542ea9c1c8a5df7e70ef9',
    },
    thumbnail: {
      type: 'string',
      description: 'The thumbnail information.',
      nullable: true,
    },
    analyticsIdentifiers: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AnalyticsIdentifier',
      },
      description: 'The list of analytics tracker identifiers mapped to the host, per language.',
      nullable: true,
    },
    settings: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      description: 'The host settings collection.',
      nullable: true,
    },
    languageSettings: {
      $ref: '#/components/schemas/SiteLanguageSettings',
    },
  },
  additionalProperties: false,
  description: 'A host creation request',
} as const;

export const CreateSiteCollectionInputSchema = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      maxLength: 50,
      minLength: 0,
      pattern: '^(?![\\s-])[a-zA-Z0-9_\\s-]*(?<!\\s)$',
      type: 'string',
      description: `The unique system name of the new collection.
Example value: skate-brand-sites`,
      default: 'string',
      example: 'skate-brand-sites',
    },
    displayName: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: `A short, meaningful name for the collection.
Example value: Skate Brand Websites`,
      nullable: true,
      example: 'Skate Brand Websites',
    },
    description: {
      maxLength: 100,
      minLength: 0,
      type: 'string',
      description: `A longer, more detailed description of the collection.
Example value: Collection for all Skate Park brand websites.`,
      nullable: true,
      example: 'Collection for all Skate Park brand websites.',
    },
  },
  additionalProperties: false,
  description: 'A site collection creation request.',
} as const;

export const DetachFromSitesInputSchema = {
  required: ['sitesIdentifiers'],
  type: 'object',
  properties: {
    sitesIdentifiers: {
      type: 'array',
      items: {
        type: 'string',
      },
      description:
        'The list of sites, based on their identifier, for which the analytic identifier should be unassigned.',
    },
  },
  additionalProperties: false,
  description: 'Analytics identifier detach request.',
} as const;

export const EditLanguageInputSchema = {
  type: 'object',
  properties: {
    languageCode: {
      type: 'string',
      nullable: true,
    },
    regionCode: {
      type: 'string',
      nullable: true,
    },
    fallbackLanguageIso: {
      type: 'string',
      nullable: true,
    },
    baseIsoCultureCode: {
      type: 'string',
      nullable: true,
    },
    fallbackRegionDisplayName: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ErrorPageSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `The identifier of the page.
Example value: 68900348a3b84eb8ac7df4d179c25727`,
      nullable: true,
      example: '68900348a3b84eb8ac7df4d179c25727',
    },
    path: {
      type: 'string',
      description: `The path for the page.
Example value: Sitecore/Content/Home/Categories/Products/MyProduct`,
      nullable: true,
      example: 'Sitecore/Content/Home/Categories/Products/MyProduct',
    },
  },
  additionalProperties: false,
  description: 'The error page response entity.',
} as const;

export const ErrorPagesSchema = {
  type: 'object',
  properties: {
    errorPage: {
      type: 'string',
      description: `The identifier of the site's 500 error page. You can get page identifiers by calling the /hierarchy endpoint.
Example value: c5a2fe31-46bd-34ae-91fb-d3c24b5a6e7f`,
      nullable: true,
      example: 'c5a2fe31-46bd-34ae-91fb-d3c24b5a6e7f',
    },
    notFoundPage: {
      type: 'string',
      description: `The identifier of the site's 404 error page. You can get page identifiers by calling the /hierarchy endpoint.
Example value: a2fc5e31-6b4d-a43e-9f1b-c2d34b5a6e7f`,
      nullable: true,
      example: 'a2fc5e31-6b4d-a43e-9f1b-c2d34b5a6e7f',
    },
  },
  additionalProperties: false,
  description: 'An object containing the site error pages identifiers',
} as const;

export const ErrorPagesConfigurationSchema = {
  type: 'object',
  properties: {
    errorPage: {
      $ref: '#/components/schemas/ErrorPage',
    },
    notFoundPage: {
      $ref: '#/components/schemas/ErrorPage',
    },
  },
  additionalProperties: false,
  description: 'An object containing the site error pages',
} as const;

export const FavoriteDtoSchema = {
  type: 'object',
  properties: {
    createdAt: {
      type: 'string',
      description: 'The date and time when the favorite was created.',
      format: 'date-time',
      nullable: true,
    },
    favoriteEntityId: {
      type: 'string',
      description: `The unique identifier of the favorited entity.
Example value: 79d30e03fdaa44fda1aa03c731fe44e4`,
      nullable: true,
      example: '79d30e03fdaa44fda1aa03c731fe44e4',
    },
    favoriteEntityType: {
      type: 'string',
      description: `The type of the favorited entity.
Example value: Site`,
      nullable: true,
      example: 'Site',
    },
  },
  additionalProperties: false,
  description: "Represents a data transfer object for a user's favorite entity.",
} as const;

export const HostSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `The host ID.
Example value: 5aae1eeaea2440bf96f11f43da82c77b`,
      nullable: true,
      example: '5aae1eeaea2440bf96f11f43da82c77b',
    },
    name: {
      type: 'string',
      description: `The name of the site host.
Example value: skate-park`,
      nullable: true,
      example: 'skate-park',
    },
    hostnames: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: `One or more hostnames.
Example value: [
  "dev.skate-park.com",
  "uat.skate-park.com"
]`,
      nullable: true,
      example: ['dev.skate-park.com', 'uat.skate-park.com'],
    },
    targetHostname: {
      type: 'string',
      description: `The target hostname.
Example value: www.skate-park.com`,
      nullable: true,
      example: 'www.skate-park.com',
    },
    homePageId: {
      type: 'string',
      description: `The identifier of the home page.
Example value: 5aae1eeaea2440bf96f11f43da82c77b`,
      nullable: true,
      example: '5aae1eeaea2440bf96f11f43da82c77b',
    },
    renderingHost: {
      $ref: '#/components/schemas/RenderingHost',
    },
    permissions: {
      $ref: '#/components/schemas/Permissions',
    },
    settings: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      description: 'The host settings collection.',
      nullable: true,
      example: {
        isSiteThumbnailSource: 'true',
        sxaLinkable: 'false',
      },
    },
    properties: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      description: 'Readonly host properties collection.',
      nullable: true,
      example: {
        siteDefinitionID: '{9004989A-E482-4587-B5C5-F9AECCD43565}',
        startItem: '/Home',
      },
    },
    analyticsIdentifiers: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      description: `The list of analytics tracker identifiers mapped to the host, per language.
Example value: [
  {
    "name": "skate-park",
    "language": "en-US"
  }
]`,
      nullable: true,
      example: [
        {
          name: 'skate-park',
          language: 'en-US',
        },
      ],
    },
    languageSettings: {
      $ref: '#/components/schemas/SiteLanguageSettings',
    },
    created: {
      type: 'string',
      description: `The date when the host was created.
Example value: 2019-08-24T14:15:22Z`,
      format: 'date-time',
      nullable: true,
      example: '2019-08-24T14:15:22Z',
    },
    createdBy: {
      type: 'string',
      description: `The ID of the user who created the host.
Example value: L6kfw52ZVf`,
      nullable: true,
      example: 'L6kfw52ZVf',
    },
  },
  additionalProperties: false,
  description: 'A host response entity',
} as const;

export const JobSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      description: `The name of the job.
Example value: Create site`,
      nullable: true,
      example: 'Create site',
    },
    done: {
      type: 'boolean',
      description: `Whether the job has finished.
Example value: True`,
      example: true,
    },
    queueTime: {
      type: 'string',
      description: `A timestamp of when the job was added to the queue.
Example value: 2024-06-12T01:47:37.316Z`,
      format: 'date-time',
      example: '2024-06-12T01:47:37.316Z',
    },
    handle: {
      type: 'string',
      description: `The handle of the job.
Example value: 4d97d35a-b605-4fc6-8a03-5bb8e403cdaf;customer-tenant-env`,
      nullable: true,
      example: '4d97d35a-b605-4fc6-8a03-5bb8e403cdaf;customer-tenant-env',
    },
    site: {
      type: 'string',
      description: `The name of the site.
Example value: new-site`,
      nullable: true,
      example: 'new-site',
    },
    siteCollection: {
      type: 'string',
      description: `The identifier or name of the site collection.
Example value: {81D27BA9-F798-4190-8536-CA20203AA6EA}`,
      nullable: true,
      example: '{81D27BA9-F798-4190-8536-CA20203AA6EA}',
    },
  },
  additionalProperties: false,
  description: 'A job response entity.',
} as const;

export const LanguageSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `The identifier of the language.
Example value: af58419145c9420187405409f4cf8bdd`,
      nullable: true,
      example: 'af58419145c9420187405409f4cf8bdd',
    },
    iso: {
      type: 'string',
      description: `The ISO code of the language.
Example value: en`,
      nullable: true,
      example: 'en',
    },
    regionalIsoCode: {
      type: 'string',
      description: `The regional ISO code of the language, for example, US for the USA, or DK for Denmark.
Example value: en-US`,
      nullable: true,
      example: 'en-US',
    },
    fallbackLanguageIso: {
      type: 'string',
      description: `The ISO code of the fallback language
Example value: en`,
      nullable: true,
      example: 'en',
    },
    name: {
      type: 'string',
      description: `The ISO language code (e.g., "en" for English, "es" for Spanish).
Example value: en-US`,
      nullable: true,
      example: 'en-US',
    },
    displayName: {
      type: 'string',
      description: `The human-readable name of the language as it appears in the user interface, for example, "English" or "Español."
Example value: English (United States) : English (United States)`,
      nullable: true,
      example: 'English (United States) : English (United States)',
    },
    nativeName: {
      type: 'string',
      description: `The language name in its original script or characters. For instance, "English" would be displayed as "English" itself, but "日本語" would appear as "日本語."
Example value: English (United States)`,
      nullable: true,
      example: 'English (United States)',
    },
    englishName: {
      type: 'string',
      description: `The language name in English, regardless of the language being described. For example, "Deutsch" would be displayed as "German."
Example value: English (United States)`,
      nullable: true,
      example: 'English (United States)',
    },
    baseIsoCultureCode: {
      type: 'string',
      description: `Base ISO culture code. If this is a custom language, this ISO culture code will represent the language code used as the base of this language.
For example, if the custom language uses the same writing system, calendar, and date format as American English, the value would be 'en-US'.
Example value: en-US`,
      nullable: true,
      example: 'en-US',
    },
    fallbackRegionDisplayName: {
      type: 'string',
      description: `If this is a custom language, the Fallback Region Display Name respresents the region name that should be displayed.
Example value: North America`,
      nullable: true,
      example: 'North America',
    },
    permissions: {
      $ref: '#/components/schemas/Permissions',
    },
  },
  additionalProperties: false,
  description: 'Language',
} as const;

export const LanguageDataSchema = {
  type: 'object',
  properties: {
    displayName: {
      type: 'string',
      description: `The display name of the language.
Example value: Japanese (Japan) : 日本語 (日本)`,
      nullable: true,
      example: 'Japanese (Japan) : 日本語 (日本)',
    },
    englishName: {
      type: 'string',
      description: `The language name in English, regardless of the language being described. For example, "Deutsch" would be displayed as "German."
Example value: English (United States)`,
      nullable: true,
      example: 'English (United States)',
    },
    locale: {
      type: 'string',
      description: `The language code of the locale.
Example value: ja-JP`,
      nullable: true,
      example: 'ja-JP',
    },
  },
  additionalProperties: false,
  description: 'Data for the site locales.',
} as const;

export const LocaleStatisticsSchema = {
  type: 'object',
  properties: {
    data: {
      $ref: '#/components/schemas/LanguageData',
    },
    pageCount: {
      type: 'integer',
      description: `The number of pages in this locale.
Example value: 60`,
      format: 'int32',
      example: 60,
    },
  },
  additionalProperties: false,
  description: 'Represents the statistics for a locale.',
} as const;

export const LocalizationStatisticsSchema = {
  type: 'object',
  properties: {
    locales: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/LocaleStatistics',
      },
      description: 'A collection of locales defined for the site and their statistics.',
      nullable: true,
    },
    totalPageCount: {
      type: 'integer',
      description: `The total number of pages across all locales.
Example value: 60`,
      format: 'int32',
      example: 60,
    },
  },
  additionalProperties: false,
  description: 'Represents the localization statistics for a site.',
} as const;

export const NameValidationResultSchema = {
  type: 'object',
  properties: {
    isValid: {
      type: 'boolean',
      description: 'Whether the name is valid.',
    },
    message: {
      type: 'string',
      description: 'Details about the request.',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const NewSiteInputSchema = {
  required: ['language', 'siteName', 'templateId'],
  type: 'object',
  properties: {
    siteName: {
      maxLength: 50,
      minLength: 0,
      pattern: '^(?![\\s-])[a-zA-Z0-9_\\s-]*(?<!\\s)$',
      type: 'string',
      description: `The name of the site.
Example value: skate-park`,
      default: 'string',
      example: 'skate-park',
    },
    displayName: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: `The display name for the site.
Example value: Skate Park Site`,
      nullable: true,
      example: 'Skate Park Site',
    },
    templateId: {
      minLength: 1,
      type: 'string',
      description: `The ID of the template used to create the site. If you don't know the template ID, first [retrieve site templates](#tag/Sites/operation/GetTemplates).
Example value: 5aae1eeaea2440bf96f11f43da82c77b`,
      example: '5aae1eeaea2440bf96f11f43da82c77b',
    },
    collectionId: {
      pattern:
        '(?i)^(?:[({][0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12}[)}]|[0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12})$|(?i)^[0-9A-Z]{22}$',
      type: 'string',
      description: `The ID of the collection you want the new site to belong to. If you don't know the collection ID, first [retrieve collections](#tag/Collections/operation/Get).
Required if Sitecore.XmApps.Sites.Models.REST.NewSiteInput.CollectionName is not provided. If left empty, you must provide collectionName instead and a new collection will be created along with the newly created site.
If both collectionId and collectionName are provided, collectionName will be ignored.
Example value: 5aae1eeaea2440bf96f11f43da82c77b`,
      nullable: true,
      example: '5aae1eeaea2440bf96f11f43da82c77b',
    },
    language: {
      type: 'string',
      description: `The language for the site. If you do not know what languages are available in the environment, first [retrieve the list of languages](#tag/Languages/operation/Get).
If the language you want is not available in the environment, [add the language](#tag/Languages/operation/Create) first.
Example value: en`,
      example: 'en',
    },
    languages: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: `The list of supported languages for the site.
Example value: [
  "en",
  "da"
]`,
      nullable: true,
      example: ['en', 'da'],
    },
    hostName: {
      type: 'string',
      description: `Optional hostname for the new site. Default value: *
Example value: dev.skate-park.com`,
      nullable: true,
      example: 'dev.skate-park.com',
    },
    description: {
      maxLength: 100,
      minLength: 0,
      type: 'string',
      description: `Optional text that provides a meaningful description of the site.
Example value: New site for Brand A in English-speaking countries.`,
      nullable: true,
      example: 'New site for Brand A in English-speaking countries.',
    },
    collectionName: {
      maxLength: 50,
      minLength: 0,
      pattern: '^(?![\\s-])[a-zA-Z0-9_\\s-]*(?<!\\s)$',
      type: 'string',
      description: `The name of the new collection you want the new site to belong to.
Required if Sitecore.XmApps.Sites.Models.REST.NewSiteInput.CollectionId is not provided. If left empty, you must provide collectionId of an existing collection you want the new site to belong to.
If both collectionId and collectionName are provided, collectionName will be ignored.
Example value: Brand A`,
      nullable: true,
      example: 'Brand A',
    },
    collectionDisplayName: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: `The display name for the collection.
Example value: Skate Park Site`,
      nullable: true,
      example: 'Skate Park Site',
    },
    collectionDescription: {
      maxLength: 100,
      minLength: 0,
      type: 'string',
      description: `If you want to create a new site collection while creating a new site, you can provide a collection description.
Example value: Sample description for the site collection containing Sites for Brand A`,
      nullable: true,
      example: 'Sample description for the site collection containing Sites for Brand A',
    },
    posMappings: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AnalyticsIdentifier',
      },
      description: `The [site identifier](https://doc.sitecore.com/xmc/en/users/xm-cloud/manage-personalization-and-analytics-for-sites.html) for the site.
This identifier lets you control analytics and personalization for the site.`,
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'A site creation request.',
} as const;

export const PageAggregationResponseSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `The page identifier.
Example value: 8f0b81bc-7388-46be-b109-6e73d1114470`,
      nullable: true,
      example: '8f0b81bc-7388-46be-b109-6e73d1114470',
    },
    language: {
      type: 'string',
      description: `The language of the page.
Example value: en-US`,
      nullable: true,
      example: 'en-US',
    },
    name: {
      type: 'string',
      description: `The page name.
Example value: Home`,
      nullable: true,
      example: 'Home',
    },
    displayName: {
      type: 'string',
      description: `The display name of the page for the specified language.
Example value: Home`,
      nullable: true,
      example: 'Home',
    },
    components: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/ComponentAggregationResponse',
      },
      description: 'A collection of the page components.',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const PageHierarchySchema = {
  type: 'object',
  properties: {
    page: {
      $ref: '#/components/schemas/PageResponse',
    },
    children: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PageResponse',
      },
      description: "Details of this page's children.",
      nullable: true,
    },
    ancestors: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PageResponse',
      },
      description: "Details of this page's ancestors.",
      nullable: true,
    },
    siblings: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PageResponse',
      },
      description: "Details of this page's siblings.",
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'Page hierarchy response entity.',
} as const;

export const PageInsertOptionSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `Template ID
Example value: 6fe7d655-1e3d-4c27-8010-5777f06c6c4f`,
      nullable: true,
      example: '6fe7d655-1e3d-4c27-8010-5777f06c6c4f',
    },
    displayName: {
      type: 'string',
      description: `Template display name
Example value: Page`,
      nullable: true,
      example: 'Page',
    },
  },
  additionalProperties: false,
} as const;

export const PageLockingSchema = {
  type: 'object',
  properties: {
    canUnlock: {
      type: 'boolean',
      description: `Whether the current user can unlock the page for editing.
Example value: False`,
      example: false,
    },
    isLocked: {
      type: 'boolean',
      description: `Whether the page is currently locked for editing.
Example value: False`,
      example: false,
    },
    lockedBy: {
      type: 'string',
      description: `If the page is locked, the user who locked it.
Example value: john.smith@skate-park.com`,
      nullable: true,
      example: 'john.smith@skate-park.com',
    },
    lockedByCurrentUser: {
      type: 'boolean',
      description: `Whether the page was locked by the current user.
Example value: False`,
      example: false,
    },
  },
  additionalProperties: false,
} as const;

export const PageRequestSchema = {
  required: ['id', 'language'],
  type: 'object',
  properties: {
    id: {
      minLength: 1,
      type: 'string',
      description: `The page identifier.
Example value: 8f0b81bc-7388-46be-b109-6e73d1114470`,
      example: '8f0b81bc-7388-46be-b109-6e73d1114470',
    },
    language: {
      minLength: 1,
      type: 'string',
      description: `The language of the page.
Example value: en-US`,
      example: 'en-US',
    },
  },
  additionalProperties: false,
} as const;

export const PageResponseSchema = {
  type: 'object',
  properties: {
    insertOptions: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PageInsertOption',
      },
      description: 'Insert options for the page.',
      nullable: true,
    },
    hasVersions: {
      type: 'boolean',
      description: `Whether the page has versions in the queried language.
Example value: True`,
      example: true,
    },
    children: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PageResponse',
      },
      description: 'Children of the page.',
      nullable: true,
    },
    id: {
      type: 'string',
      description: `The page identifier.
Example value: 68900348a3b84eb8ac7df4d179c25727`,
      nullable: true,
      example: '68900348a3b84eb8ac7df4d179c25727',
    },
    name: {
      type: 'string',
      description: `The page's system name.
Example value: Home`,
      nullable: true,
      example: 'Home',
    },
    displayName: {
      type: 'string',
      description: `The page's display name.
Example value: Site Home`,
      nullable: true,
      example: 'Site Home',
    },
    language: {
      type: 'string',
      description: `The page language.
Example value: en-US`,
      nullable: true,
      example: 'en-US',
    },
    version: {
      type: 'integer',
      description: `The current version of the page.
Example value: 1`,
      format: 'int32',
      example: 1,
    },
    templateId: {
      type: 'string',
      description: `The identifier of the template this page is based on.
Example value: 6fe7d6551e3d4c2780105777f06c6c4f`,
      nullable: true,
      example: '6fe7d6551e3d4c2780105777f06c6c4f',
    },
    parentId: {
      type: 'string',
      description: `The identifier of the page's parent.
Example value: 4bc0c81a280b4b13890b7b074b9d68f4`,
      nullable: true,
      example: '4bc0c81a280b4b13890b7b074b9d68f4',
    },
    hasPresentation: {
      type: 'boolean',
      description: `If set to true, this page can be rendered in the XM Cloud Pages application. This value is automatically set to false for the root item of the site, as well as for the folders if there are any.
Example value: True`,
      example: true,
    },
    hasChildren: {
      type: 'boolean',
      description: `Whether the page has any child pages.
Example value: True`,
      example: true,
    },
    isLatestPublishableVersion: {
      type: 'boolean',
      description: `Whether the page version is latest publishable version
Example value: True`,
      example: true,
    },
    permissions: {
      $ref: '#/components/schemas/Permissions',
    },
    locking: {
      $ref: '#/components/schemas/PageLocking',
    },
    path: {
      type: 'string',
      description: `The path for the page.
Example value: Sitecore/Content/Home/Categories/Products/MyProduct`,
      nullable: true,
      example: 'Sitecore/Content/Home/Categories/Products/MyProduct',
    },
    route: {
      type: 'string',
      description: `The public-facing URL path relative to the site's root.
Example value: /Aboutus`,
      nullable: true,
      example: '/Aboutus',
    },
  },
  additionalProperties: false,
} as const;

export const PageVariantsAggregationResponseSchema = {
  type: 'object',
  properties: {
    pages: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PageVariantsResponse',
      },
      description: 'Aggregated data of the currently active variants for this page.',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const PageVariantsResponseSchema = {
  type: 'object',
  properties: {
    pageId: {
      type: 'string',
      description: `The page identifier.
Example value: 8f0b81bc-7388-46be-b109-6e73d1114470`,
      nullable: true,
      example: '8f0b81bc-7388-46be-b109-6e73d1114470',
    },
    language: {
      type: 'string',
      description: `The language of the page.
Example value: en-US`,
      nullable: true,
      example: 'en-US',
    },
    variantIds: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: `The list of page personalization variant identifiers.
Example value: [
  "edc7cee9-14b5-4218-a7a8-13664c714bdb",
  "5f457136-fd9f-4a5b-be3f-2d46709f01a4"
]`,
      nullable: true,
      example: ['edc7cee9-14b5-4218-a7a8-13664c714bdb', '5f457136-fd9f-4a5b-be3f-2d46709f01a4'],
    },
  },
  additionalProperties: false,
} as const;

export const PagesAggregationResponseSchema = {
  type: 'object',
  properties: {
    pages: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/PageAggregationResponse',
      },
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const PermissionsSchema = {
  type: 'object',
  properties: {
    canAdmin: {
      type: 'boolean',
      description: `Whether the current user has admin rights. Being an admin means that you control access permissions for other users, and have full read and write rights.
Example value: False`,
      example: false,
    },
    canWrite: {
      type: 'boolean',
      description: `Whether the current user has permissions to edit values. Users with write access also have read access.
Example value: False`,
      example: false,
    },
    canCreate: {
      type: 'boolean',
      description: `Whether the current user has permission to create entities.
Example value: False`,
      example: false,
    },
    canDelete: {
      type: 'boolean',
      description: `Whether the current user has permission to delete entities.
Example value: False`,
      example: false,
    },
    canRename: {
      type: 'boolean',
      description: `Whether the current user has permission to rename entities.
Example value: False`,
      example: false,
    },
    canRead: {
      type: 'boolean',
      description: `Whether the current user has permission to see entities, including all their parameters.
Example value: False`,
      example: false,
    },
    canPublish: {
      type: 'boolean',
      description: `Whether the current user has permission to publish sites in this environment.
Example value: False`,
      example: false,
    },
    canDuplicate: {
      type: 'boolean',
      description: `Whether the current user has permission to duplicate entities.
Example value: False`,
      example: false,
    },
    canWriteLanguage: {
      type: 'boolean',
      description: `Whether the current user has permission to write item language entities.
Example value: False`,
      example: false,
    },
  },
  additionalProperties: false,
  description: 'The access rights of the current user to the site.',
} as const;

export const ProblemDetailsSchema = {
  type: 'object',
  properties: {
    type: {
      type: 'string',
      description: 'The type of the error response entity.',
      nullable: true,
    },
    title: {
      type: 'string',
      description: 'The title of the error response entity.',
      nullable: true,
    },
    status: {
      type: 'integer',
      description: 'The response status code.',
      format: 'int32',
      nullable: true,
    },
    detail: {
      type: 'string',
      description: 'A detailed explanation, specific to this occurrence of the problem.',
      nullable: true,
    },
    instance: {
      type: 'string',
      description:
        'If available, a URI reference that identifies the specific occurrence of the problem.',
      nullable: true,
    },
  },
  additionalProperties: {
    description: 'Any additional optional properties that describe the error(s).',
  },
} as const;

export const RenameSiteCollectionInputSchema = {
  required: ['systemName'],
  type: 'object',
  properties: {
    systemName: {
      maxLength: 50,
      minLength: 0,
      pattern: '^(?![\\s-])[a-zA-Z0-9_\\s-]*(?<!\\s)$',
      type: 'string',
      description: `The new system name for the site collection.
Example value: skate-brand-sites`,
      default: 'string',
      example: 'skate-brand-sites',
    },
  },
  additionalProperties: false,
  description: 'Site collection rename request.',
} as const;

export const RenameSiteInputSchema = {
  required: ['name'],
  type: 'object',
  properties: {
    name: {
      maxLength: 50,
      minLength: 0,
      pattern: '^(?![\\s-])[a-zA-Z0-9_\\s-]*(?<!\\s)$',
      type: 'string',
      description: `The new name for the site.
Example value: new-site`,
      default: 'string',
      example: 'new-site',
    },
  },
  additionalProperties: false,
  description: 'A site rename request.',
} as const;

export const RenderingHostSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `The rendering host ID.
Example value: 5aae1eeaea2440bf96f11f43da82c77b`,
      nullable: true,
      example: '5aae1eeaea2440bf96f11f43da82c77b',
    },
    name: {
      type: 'string',
      description: `The name of the rendering host.
Example value: Default`,
      nullable: true,
      example: 'Default',
    },
    appName: {
      type: 'string',
      description: `The name of the app.
Example value: Default`,
      nullable: true,
      example: 'Default',
    },
    layoutServiceConfiguration: {
      type: 'string',
      description: `The server side rendering engine configuration URL.
Example value: https://xmc-eh-uniqueid.sitecorecloud.io:443/api/editing/config`,
      nullable: true,
      example: 'https://xmc-eh-uniqueid.sitecorecloud.io:443/api/editing/config',
    },
    serverSideRenderingEngineEndpointUrl: {
      type: 'string',
      description: `The server side rendering engine endpoint URL.
Example value: https://xmc-eh-uniqueid.sitecorecloud.io:443/api/editing/render`,
      nullable: true,
      example: 'https://xmc-eh-uniqueid.sitecorecloud.io:443/api/editing/render',
    },
    serverSideRenderingEngineApplicationUrl: {
      type: 'string',
      description: `The server side rendering engine application URL.
Example value: https://xmc-eh-uniqueid.sitecorecloud.io/`,
      nullable: true,
      example: 'https://xmc-eh-uniqueid.sitecorecloud.io/',
    },
  },
  additionalProperties: false,
  description: 'The rendering host response entity.',
} as const;

export const SiteSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `The identifier of the site.
Example value: 497f6eca-6276-4993-bfeb-53cbbbba6f08`,
      nullable: true,
      example: '497f6eca-6276-4993-bfeb-53cbbbba6f08',
    },
    name: {
      type: 'string',
      description: `The name of the site.
Example value: skate-park`,
      nullable: true,
      example: 'skate-park',
    },
    description: {
      type: 'string',
      description: `The description of the site.
Example value: New site for Brand A in English-speaking countries`,
      nullable: true,
      example: 'New site for Brand A in English-speaking countries',
    },
    displayName: {
      type: 'string',
      description: `The display name of the site.
Example value: Skate Park Website`,
      nullable: true,
      example: 'Skate Park Website',
    },
    thumbnail: {
      $ref: '#/components/schemas/Thumbnail',
    },
    collectionId: {
      type: 'string',
      description: `The identifier of the collection to which the site belongs.
Example value: 5aae1eeaea2440bf96f11f43da82c77b`,
      nullable: true,
      example: '5aae1eeaea2440bf96f11f43da82c77b',
    },
    created: {
      type: 'string',
      description: `The date when the site was created.
Example value: 2019-08-24T14:15:22Z`,
      format: 'date-time',
      example: '2019-08-24T14:15:22Z',
    },
    createdBy: {
      type: 'string',
      description: `The ID of the user who created the site.
Example value: L6kfw52ZVf`,
      nullable: true,
      example: 'L6kfw52ZVf',
    },
    sortOrder: {
      type: 'integer',
      description: `Sort order of the site.
Example value: 100`,
      format: 'int32',
      nullable: true,
      example: 100,
    },
    brandKitId: {
      type: 'string',
      description: `The identifier of the brand kit associated with this site.
Example value: e3f1c5a2-4b6d-4a3e-9f1b-2d3c4b5a6e7f`,
      nullable: true,
      example: 'e3f1c5a2-4b6d-4a3e-9f1b-2d3c4b5a6e7f',
    },
    permissions: {
      $ref: '#/components/schemas/Permissions',
    },
    languages: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: `The list of languages in use by the site.
Example value: [
  "en-US",
  "en-CA"
]`,
      nullable: true,
      example: ['en-US', 'en-CA'],
    },
    hosts: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/Host',
      },
      description: 'The list of hosts that the site resolves to.',
      nullable: true,
    },
    supportedLanguages: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: `The list of languages supported by Sitecore.
Example value: [
  "en-US",
  "en-CA"
]`,
      nullable: true,
      example: ['en-US', 'en-CA'],
    },
    errorPagesConfiguration: {
      $ref: '#/components/schemas/ErrorPagesConfiguration',
    },
    settings: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      description: 'The settings for the site.',
      nullable: true,
      example: {
        thumbnailsRootPath: '/sitecore/media library/Project/sample-collection/sample-site',
        generateThumbnails: 'true',
      },
    },
    properties: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      description: 'The read-only properties of the site.',
      nullable: true,
      example: {
        SxaSiteTemplate: '{E46F3AF2-39FA-4866-A157-7017C4B2A40C}',
        IsSxaSite: 'true',
      },
    },
  },
  additionalProperties: false,
  description: 'A site response entity.',
} as const;

export const SiteCollectionSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `The identifier of the site collection.
Example value: 497f6eca-6276-4993-bfeb-53cbbbba6f08`,
      nullable: true,
      example: '497f6eca-6276-4993-bfeb-53cbbbba6f08',
    },
    name: {
      type: 'string',
      description: `The unique system name of the site collection.
Example value: skate-park-sites`,
      nullable: true,
      example: 'skate-park-sites',
    },
    description: {
      type: 'string',
      description: `The description of the site collection.
Example value: Collection for all Skate Park brand websites.`,
      nullable: true,
      example: 'Collection for all Skate Park brand websites.',
    },
    displayName: {
      type: 'string',
      description: `The display name of the site collection.
Example value: Skate Park Websites`,
      nullable: true,
      example: 'Skate Park Websites',
    },
    sortOrder: {
      type: 'integer',
      description: `Sort order of the site collection.
Example value: 100`,
      format: 'int32',
      nullable: true,
      example: 100,
    },
    createdBy: {
      type: 'string',
      description: `The ID of the user who created the site collection.
Example value: L6kfw52ZVf`,
      nullable: true,
      example: 'L6kfw52ZVf',
    },
    created: {
      type: 'string',
      description: `The date when the site collection was created.
Example value: 2019-08-24T14:15:22Z`,
      format: 'date-time',
      example: '2019-08-24T14:15:22Z',
    },
    permissions: {
      $ref: '#/components/schemas/Permissions',
    },
    settings: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      description: 'The site collection settings.',
      nullable: true,
      example: {
        itemPath: '/sitecore/content/skate-park-sites',
      },
    },
  },
  additionalProperties: false,
  description: 'Site collection response entity.',
} as const;

export const SiteLanguageSettingsSchema = {
  type: 'object',
  properties: {
    defaultLanguage: {
      type: 'string',
      description: `The default language.
Example value: en`,
      nullable: true,
      example: 'en',
    },
    languageEmbedding: {
      type: 'boolean',
      description: `Whether language embedding is enabled.
Example value: False`,
      nullable: true,
      example: false,
    },
    itemLanguageFallback: {
      type: 'boolean',
      description: `Whether item language fallback is enabled.
Example value: False`,
      nullable: true,
      example: false,
    },
    fieldLanguageFallback: {
      type: 'boolean',
      description: `Whether field language fallback is enabled.
Example value: False`,
      nullable: true,
      example: false,
    },
  },
  additionalProperties: false,
  description: 'The language settings of the host.',
} as const;

export const SiteTemplateSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `The identifier of the site template.
Example value: {5AAE1EEA-EA24-40BF-96F1-1F43DA82C77B}`,
      nullable: true,
      example: '{5AAE1EEA-EA24-40BF-96F1-1F43DA82C77B}',
    },
    name: {
      type: 'string',
      description: `The name of the site template.
Example value: Basic`,
      nullable: true,
      example: 'Basic',
    },
    enabled: {
      type: 'boolean',
      description: `Whether the template is available for use in the XM Cloud Create a site UI.
Example value: True`,
      example: true,
    },
    description: {
      type: 'string',
      description: `The description of the site template.
Example value: An example of a simple website with homepage, subpage, navigation, and footer.`,
      nullable: true,
      example: 'An example of a simple website with homepage, subpage, navigation, and footer.',
    },
    contents: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/StringStringKeyValuePair',
      },
      description:
        'The summary of what pages, components, or integrations are included in the template.',
      nullable: true,
    },
    createdBy: {
      type: 'string',
      description: `The author of the site template.
Example value: sitecore\L6kfw52Vf`,
      nullable: true,
      example: 'sitecore\\L6kfw52Vf',
    },
    updatedOn: {
      type: 'string',
      description: `The date of the last update.
Example value: 2019-08-24T14:15:22Z`,
      format: 'date-time',
      example: '2019-08-24T14:15:22Z',
    },
    thumbnail: {
      type: 'string',
      description: `The thumbnail of the site template.
Example value: https://customer-tenant.sitecorecloud.io/-/media/Feature/JSS-Experience-Accelerator/Basic-Site/template-thumbnail.png?w=176`,
      nullable: true,
      example:
        'https://customer-tenant.sitecorecloud.io/-/media/Feature/JSS-Experience-Accelerator/Basic-Site/template-thumbnail.png?w=176',
    },
    image: {
      type: 'string',
      description: `Large resolution screenshot of the site template.
Example value: https://customer-tenant.sitecorecloud.io/-/media/Feature/JSS-Experience-Accelerator/Basic-Site/template-thumbnail.png`,
      nullable: true,
      example:
        'https://customer-tenant.sitecorecloud.io/-/media/Feature/JSS-Experience-Accelerator/Basic-Site/template-thumbnail.png',
    },
    metadata: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      description: 'The site template metadata.',
      nullable: true,
      example: {
        builtInTemplate: 'true',
      },
    },
  },
  additionalProperties: false,
  description: 'Site template response entity.',
} as const;

export const SitemapAlternateLinksOptionsSchema = {
  type: 'object',
  properties: {
    enabled: {
      type: 'boolean',
      description: `Whether alternate link generation is enabled. When enabled, xhtml:link elements are added to the URL elements in the sitemap.
Example value: True`,
      nullable: true,
      example: true,
    },
    includeXDefault: {
      type: 'boolean',
      description: `Whether alternate links include an x-default link element. The x-default value signals to the search algorithm that the page does not target any specific language or region.
Example value: True`,
      nullable: true,
      example: true,
    },
  },
  additionalProperties: false,
  description: 'Alternate link sitemap configuration.',
} as const;

export const SitemapCacheOptionsSchema = {
  type: 'object',
  properties: {
    refreshThreshold: {
      type: 'string',
      description: `Threshold in minutes for refreshing the sitemap cache.
Example value: 60`,
      nullable: true,
      example: '60',
    },
  },
  additionalProperties: false,
  description: 'Sitemap caching configuration.',
} as const;

export const SitemapConfigurationSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `The identifier of the sitemap configuration item.
Example value: 2905a9c7-30b0-4d3f-bced-f1f9382c8041`,
      nullable: true,
      example: '2905a9c7-30b0-4d3f-bced-f1f9382c8041',
    },
    enabled: {
      type: 'boolean',
      description: `Whether sitemap generation is enabled.
Example value: True`,
      nullable: true,
      example: true,
    },
    maxNumberOfPages: {
      type: 'string',
      description: `Maximum number of pages to include in a single sitemap file.
Example value: 1000`,
      nullable: true,
      example: '1000',
    },
    alternateLinksOptions: {
      $ref: '#/components/schemas/SitemapAlternateLinksOptions',
    },
    urlOptions: {
      $ref: '#/components/schemas/SitemapUrlOptions',
    },
    cacheOptions: {
      $ref: '#/components/schemas/SitemapCacheOptions',
    },
    permissions: {
      $ref: '#/components/schemas/Permissions',
    },
  },
  additionalProperties: false,
  description: 'Configuration settings for sitemap generation.',
} as const;

export const SitemapUrlOptionsSchema = {
  type: 'object',
  properties: {
    includeChangeFreq: {
      type: 'boolean',
      description: `Whether to include change frequency attribute in the sitemap, that specifies how often the page changes its content.
Example value: True`,
      nullable: true,
      example: true,
    },
    includeLastMod: {
      type: 'boolean',
      description: `Whether to include the last modification date in the sitemap.
Example value: True`,
      nullable: true,
      example: true,
    },
    includePriority: {
      type: 'boolean',
      description: `Whether to include priority information in the sitemap. The priority is a number between 0 and 1 that represents the importance of a page.
Example value: True`,
      nullable: true,
      example: true,
    },
  },
  additionalProperties: false,
  description: 'URL property configurations in the sitemap.',
} as const;

export const SortCollectionsInputSchema = {
  type: 'object',
  properties: {
    collections: {
      type: 'object',
      additionalProperties: {
        type: 'integer',
        format: 'int32',
      },
      description: 'A collection containing collection IDs and sort order.',
      nullable: true,
      example: {
        '{E7ACF719-9448-4B82-B9E9-E35E612392B1}': 0,
        '{3BB5127B-9B19-479E-A560-DDAB73050C0D}': 100,
        '{1E3D6D62-2EE7-4B99-B973-9C861E535236}': 200,
      },
    },
  },
  additionalProperties: false,
  description: 'Sort collections request.',
} as const;

export const SortSitesInputSchema = {
  type: 'object',
  properties: {
    sites: {
      type: 'object',
      additionalProperties: {
        type: 'integer',
        format: 'int32',
      },
      description: 'A collection containing site IDs and sort order.',
      nullable: true,
      example: {
        '{43550C6A-2FFF-4DE6-B773-9133CEAF9099}': 0,
        '{258D18A4-B06B-4CE6-95A7-C0D78574552B}': 100,
        '{2C6B1648-E371-43B4-80F5-FAF4ECA43E48}': 200,
      },
    },
  },
  additionalProperties: false,
  description: 'Sort sites request.',
} as const;

export const StringStringKeyValuePairSchema = {
  type: 'object',
  properties: {
    key: {
      type: 'string',
      nullable: true,
    },
    value: {
      type: 'string',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const SupportedLanguageSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      description: `The full name of the language.
Example value: de-DE`,
      nullable: true,
      example: 'de-DE',
    },
    englishName: {
      type: 'string',
      description: `The english name of the language.
Example value: German (Germany)`,
      nullable: true,
      example: 'German (Germany)',
    },
    displayName: {
      type: 'string',
      description: `The display name of the language.
Example value: German (Germany) : Deutsch (Deutschland)`,
      nullable: true,
      example: 'German (Germany) : Deutsch (Deutschland)',
    },
    charSet: {
      type: 'string',
      description: `The character encoding, that specifies how characters are represented in a document or web page.
Example value: iso-8859-1`,
      nullable: true,
      example: 'iso-8859-1',
    },
    codePage: {
      type: 'string',
      description: `The code of the page.
Example value: 65001`,
      nullable: true,
      example: '65001',
    },
    encoding: {
      type: 'string',
      description: `The encoding.
Example value: utf-8`,
      nullable: true,
      example: 'utf-8',
    },
    languageCode: {
      type: 'string',
      description: `The code for the language.
Example value: de`,
      nullable: true,
      example: 'de',
    },
    regionCode: {
      type: 'string',
      description: `The regional ISO code of the language. For example, US for the USA, or DK for Denmark.
Example value: DE`,
      nullable: true,
      example: 'DE',
    },
  },
  additionalProperties: false,
} as const;

export const ThumbnailSchema = {
  type: 'object',
  properties: {
    url: {
      type: 'string',
      description: `The URL of the image used as thumbnail.
Example value: https://xmc-customer-tenant.sitecorecloud.io/-/media/Project/sample-collection/sample-site/System/7/0/B/C/thumbnail_70BC64BDE257400E82BFDB3344797DB7.png`,
      nullable: true,
      example:
        'https://xmc-customer-tenant.sitecorecloud.io/-/media/Project/sample-collection/sample-site/System/7/0/B/C/thumbnail_70BC64BDE257400E82BFDB3344797DB7.png',
    },
    rootPath: {
      type: 'string',
      description: `The path to the media folder where thumbnail images are stored.
Example value: sitecore/media library/Project/sample-collection/sample-site`,
      nullable: true,
      example: 'sitecore/media library/Project/sample-collection/sample-site',
    },
    autogenerated: {
      type: 'boolean',
      description: `Whether the thumbnail was autogenerated or manually uploaded.
Example value: True`,
      example: true,
    },
  },
  additionalProperties: false,
  description: 'The thumbnail response entity.',
} as const;

export const UpdateHostInputSchema = {
  type: 'object',
  properties: {
    name: {
      maxLength: 50,
      minLength: 0,
      pattern: '^(?![\\s-])[a-zA-Z0-9_\\s-]*(?<!\\s)$',
      type: 'string',
      description: `Name of the host
Example value: skate-park`,
      default: 'string',
      nullable: true,
      example: 'skate-park',
    },
    hostnames: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: `One or more hostnames.
Example value: [
  "dev.skate-park.com",
  "uat.skate-park.com"
]`,
      nullable: true,
      example: ['dev.skate-park.com', 'uat.skate-park.com'],
    },
    targetHostname: {
      type: 'string',
      description: `The target hostname.
Example value: www.skate-park.com`,
      nullable: true,
      example: 'www.skate-park.com',
    },
    renderingHost: {
      type: 'string',
      description: `The rendering host.
Example value: Default`,
      nullable: true,
      example: 'Default',
    },
    homePageId: {
      pattern:
        '(?i)^(?:[({][0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12}[)}]|[0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12})$',
      type: 'string',
      description: `The identifier of the home page.
Example value: 110d559fdea542ea9c1c8a5df7e70ef9`,
      nullable: true,
      example: '110d559fdea542ea9c1c8a5df7e70ef9',
    },
    thumbnail: {
      type: 'string',
      description: 'The thumbnail information.',
      nullable: true,
    },
    analyticsIdentifiers: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/AnalyticsIdentifier',
      },
      description: 'The list of analytics tracker identifiers mapped to the host, per language.',
      nullable: true,
    },
    settings: {
      type: 'object',
      additionalProperties: {
        type: 'string',
      },
      description: 'The host settings collection.',
      nullable: true,
    },
    languageSettings: {
      $ref: '#/components/schemas/SiteLanguageSettings',
    },
  },
  additionalProperties: false,
  description: 'A host update request.',
} as const;

export const UpdateSiteCollectionInputSchema = {
  type: 'object',
  properties: {
    displayName: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: `The display name for the site collection.
Example value: Skate Brand Websites`,
      default: 'string',
      nullable: true,
      example: 'Skate Brand Websites',
    },
    description: {
      maxLength: 100,
      minLength: 0,
      type: 'string',
      description: `The description of the site collection.
Example value: Example site collection description.`,
      default: 'string',
      nullable: true,
      example: 'Example site collection description.',
    },
    sortOrder: {
      type: 'integer',
      description: `The sort order of the site collection.
Example value: 100`,
      format: 'int32',
      nullable: true,
      example: 100,
    },
  },
  additionalProperties: false,
  description: 'Update site collection request',
} as const;

export const UpdateSiteInputSchema = {
  type: 'object',
  properties: {
    displayName: {
      maxLength: 50,
      minLength: 0,
      type: 'string',
      description: `The display name for the site.
Example value: Skate Park Site`,
      default: 'string',
      nullable: true,
      example: 'Skate Park Site',
    },
    description: {
      maxLength: 100,
      minLength: 0,
      type: 'string',
      description: `The description for the site.
Example value: New site for Brand A in English-speaking countries.`,
      default: 'string',
      nullable: true,
      example: 'New site for Brand A in English-speaking countries.',
    },
    supportedLanguages: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: `The list of languages supported by Sitecore.
Example value: [
  "en-US",
  "en-CA"
]`,
      nullable: true,
      example: ['en-US', 'en-CA'],
    },
    shared: {
      type: 'boolean',
      description: `Whether the site should be marked as shared or not. True - site will be shared. False - site will not be marked as shared.
Example value: True`,
      nullable: true,
      example: true,
    },
    errorPages: {
      $ref: '#/components/schemas/ErrorPages',
    },
    sortOrder: {
      type: 'integer',
      description: `The sort order of the site.
Example value: 100`,
      format: 'int32',
      nullable: true,
      example: 100,
    },
    brandKitId: {
      type: 'string',
      description: `The identifier of the brand kit associated with this site.
Example value: e3f1c5a2-4b6d-4a3e-9f1b-2d3c4b5a6e7f`,
      nullable: true,
      example: 'e3f1c5a2-4b6d-4a3e-9f1b-2d3c4b5a6e7f',
    },
    resetThumbnail: {
      type: 'boolean',
      description: `Whether the thumbnail should be reset. True - thumbnail will be reset to automatic. False - thumbnail will not be reset.
Example value: True`,
      nullable: true,
      example: true,
    },
  },
  additionalProperties: false,
  description: 'A site update request.',
} as const;

export const UpdateSitemapConfigurationInputSchema = {
  required: ['id'],
  type: 'object',
  properties: {
    id: {
      minLength: 1,
      pattern:
        '(?i)^(?:[({][0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12}[)}]|[0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12})$',
      type: 'string',
      description: `The identifier of the sitemap configuration item.
Example value: da570793-3539-4923-88ca-8314ddd193f7`,
      example: 'da570793-3539-4923-88ca-8314ddd193f7',
    },
    enabled: {
      type: 'boolean',
      description: `Whether sitemap generation is enabled.
Example value: True`,
      nullable: true,
      example: true,
    },
    maxNumberOfPages: {
      type: 'string',
      description: `Maximum number of pages to include in a single sitemap file.
Example value: 1000`,
      nullable: true,
      example: '1000',
    },
    alternateLinksOptions: {
      $ref: '#/components/schemas/SitemapAlternateLinksOptions',
    },
    urlOptions: {
      $ref: '#/components/schemas/SitemapUrlOptions',
    },
    cacheOptions: {
      $ref: '#/components/schemas/SitemapCacheOptions',
    },
  },
  additionalProperties: false,
  description: 'A sitemap configuration update request',
} as const;

export const UploadMediaOutputSchema = {
  type: 'object',
  properties: {
    id: {
      type: 'string',
      description: `The thumbnail image ID.
Example value: {5AAE1EEA-EA24-40BF-96F1-1F43DA82C77B}`,
      nullable: true,
      example: '{5AAE1EEA-EA24-40BF-96F1-1F43DA82C77B}',
    },
    name: {
      type: 'string',
      description: `Name of the uploaded image.
Example value: skate-park-screenshot`,
      nullable: true,
      example: 'skate-park-screenshot',
    },
    itemPath: {
      type: 'string',
      description: `The path to the media folder where thumbnail images are stored.
Example value: sitecore/media library/Project/sample-collection/sample-site`,
      nullable: true,
      example: 'sitecore/media library/Project/sample-collection/sample-site',
    },
    url: {
      type: 'string',
      description: `URL of the image to be used as the thumbnail.
Example value: https://xmc-customer-tenant.sitecorecloud.io/-/media/Project/sample-collection/sample-site/System/7/0/B/C/thumbnail_70BC64BDE257400E82BFDB3344797DB7.png`,
      nullable: true,
      example:
        'https://xmc-customer-tenant.sitecorecloud.io/-/media/Project/sample-collection/sample-site/System/7/0/B/C/thumbnail_70BC64BDE257400E82BFDB3344797DB7.png',
    },
  },
  additionalProperties: false,
} as const;

export const ValidateCollectionNameInputSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      description: 'The name of the site collection to validate.',
      nullable: true,
    },
  },
  additionalProperties: false,
} as const;

export const ValidateSiteNameInputSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      description: `The name of the site to validate.
Example value: skate-park`,
      nullable: true,
      example: 'skate-park',
    },
  },
  additionalProperties: false,
  description: 'A site name validation request.',
} as const;

export const WorkflowStateStatisticsSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      description: `The name of the workflow state.
Example value: Draft`,
      nullable: true,
      example: 'Draft',
    },
    pageCount: {
      type: 'integer',
      description: `The number of site pages that are currently in this workflow state.
Example value: 60`,
      format: 'int32',
      example: 60,
    },
  },
  additionalProperties: false,
  description: 'Represents the statistics for a workflow state.',
} as const;

export const WorkflowStatisticsSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      description: `The name of the workflow.
Example value: Sample Workflow`,
      nullable: true,
      example: 'Sample Workflow',
    },
    states: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkflowStateStatistics',
      },
      description:
        'A collection of states defined for the workflow, and the number of pages in each state.',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'Represents the workflow statistics.',
} as const;

export const WorkflowsStatisticsSchema = {
  type: 'object',
  properties: {
    workflows: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/WorkflowStatistics',
      },
      description: 'Collection of workflow statistics for the site.',
      nullable: true,
    },
  },
  additionalProperties: false,
  description: 'Represents the workflows statistics for a site.',
} as const;
