// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type {
  CreateContentTransferData,
  GetContentTransferStatusData,
  GetContentTransferStatusResponse,
  GetChunkData,
  GetChunkResponse,
  SaveChunkData,
  CompleteChunkSetTransferData,
  CompleteChunkSetTransferResponse,
  DeleteContentTransferData,
  ConsumeFileData,
  GetBlobStateData,
  GetBlobStateResponse,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Create a Content Transfer
 * Creates a new transfer in the Source environment.
 */
export const createContentTransfer = <ThrowOnError extends boolean = false>(
  options: Options<CreateContentTransferData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/content/v1/transfers',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Get the status of a Content Transfer
 * Gets the status of the created content transfer by transfer ID.
 */
export const getContentTransferStatus = <ThrowOnError extends boolean = false>(
  options: Options<GetContentTransferStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetContentTransferStatusResponse,
    unknown,
    ThrowOnError
  >({
    url: '/content/v1/transfers/{transferId}/status',
    ...options,
  });
};

/**
 * Get a Chunk
 * Retrieves the specified chunk from the specified chunk set in the Source environment.
 */
export const getChunk = <ThrowOnError extends boolean = false>(
  options: Options<GetChunkData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetChunkResponse, unknown, ThrowOnError>({
    url: '/content/v1/transfers/{transferId}/chunksets/{chunksetId}/chunks/{chunkId}',
    ...options,
  });
};

/**
 * Save a Chunk
 * Saves the specified chunk from the specified chunk set in the Target environment.
 */
export const saveChunk = <ThrowOnError extends boolean = false>(
  options: Options<SaveChunkData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
    bodySerializer: null,
    url: '/content/v1/transfers/{transferId}/chunksets/{chunksetId}/chunks/{chunkId}',
    ...options,
    headers: {
      'Content-Type': 'application/octet-stream',
      ...options?.headers,
    },
  });
};

/**
 * Complete a Chunk Set Transfer
 * Marks the specified chunk set as complete for the given transfer.
 */
export const completeChunkSetTransfer = <ThrowOnError extends boolean = false>(
  options: Options<CompleteChunkSetTransferData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CompleteChunkSetTransferResponse,
    unknown,
    ThrowOnError
  >({
    url: '/content/v1/transfers/{transferId}/chunksets/{chunksetId}/complete',
    ...options,
  });
};

/**
 * Delete a Content Transfer
 * Deletes the content transfer by transfer ID. Starts a clean-up of all resources related to content transfer in Source or Target environments.
 */
export const deleteContentTransfer = <ThrowOnError extends boolean = false>(
  options: Options<DeleteContentTransferData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    url: '/content/v1/transfers/{transferId}',
    ...options,
  });
};

/**
 * Start raif file consuming
 * Starts consuming a `.raif` file in the specified database.
 */
export const consumeFile = <ThrowOnError extends boolean = false>(
  options: Options<ConsumeFileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/items/v2/ConsumeFile',
    ...options,
  });
};

/**
 * Get consumed files status
 * Retrieves the status of a consumed `.raif` file.
 */
export const getBlobState = <ThrowOnError extends boolean = false>(
  options: Options<GetBlobStateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetBlobStateResponse, unknown, ThrowOnError>({
    url: '/items/v2/GetBlobState',
    ...options,
  });
};
