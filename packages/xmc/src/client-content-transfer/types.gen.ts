// This file is auto-generated by @hey-api/openapi-ts

export namespace ContentTransfer {
  export type CreateContentTransferData = {
    body: {
      configuration: {
        dataTrees?: Array<{
          /**
           * The existing item path in the Source environment in the master database.
           */
          itemPath?: string;
          /**
           * The scope of the itemPath to transfer.
           */
          scope?: 'SingleItem' | 'ItemAndDescendants';
          /**
           * The merge strategy of the itemPath to transfer.
           */
          mergeStrategy?:
            | 'OverrideExistingItem'
            | 'KeepExistingItem'
            | 'LatestWin'
            | 'OverrideExistingTree';
        }>;
      };
      /**
       * Id of the transfer to create.
       */
      transferId: string;
    };
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/content/v1/transfers';
  };
  export type CreateContentTransferErrors = {
    /**
     * Invalid transfer id or configuration.
     */
    400: unknown;
    /**
     * Invalid access token.
     */
    401: unknown;
    /**
     * Authorization failed (required role is missing).
     */
    403: unknown;
  };
  export type CreateContentTransferResponses = {
    /**
     * Transfer creation started.
     */
    202: unknown;
  };
  export type GetContentTransferStatusData = {
    body?: never;
    path: {
      /**
       * ID of the transfer to retrieve.
       */
      transferId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/content/v1/transfers/{transferId}/status';
  };
  export type GetContentTransferStatusErrors = {
    /**
     * Invalid transfer id.
     */
    400: unknown;
    /**
     * Invalid access token.
     */
    401: unknown;
    /**
     * Authorization failed (required role is missing).
     */
    403: unknown;
  };
  export type GetContentTransferStatusResponses = {
    /**
     * Transfer status successfully retrieved.
     */
    200: {
      /**
       * The state of the transfer (e.g., `Completed`).
       */
      State: string;
      ChunkSetsMetadata: Array<{
        /**
         * The ID of the chunk set.
         */
        ChunkSetId: string;
        /**
         * The number of chunks in the chunk set.
         */
        ChunkCount: number;
        /**
         * The total number of items in the chunk set.
         */
        TotalItemCount: number;
      }>;
    };
  };
  export type GetContentTransferStatusResponse =
    GetContentTransferStatusResponses[keyof GetContentTransferStatusResponses];
  export type GetChunkData = {
    body?: never;
    path: {
      /**
       * ID of the transfer.
       */
      transferId: string;
      /**
       * ID of the chunk set.
       */
      chunksetId: string;
      /**
       * Id of the chunk.
       */
      chunkId: number;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/content/v1/transfers/{transferId}/chunksets/{chunksetId}/chunks/{chunkId}';
  };
  export type GetChunkErrors = {
    /**
     * Invalid transfer id, chunk set id, or chunk id.
     */
    400: unknown;
    /**
     * Invalid access token.
     */
    401: unknown;
    /**
     * Authorization failed (required role is missing).
     */
    403: unknown;
  };
  export type GetChunkResponses = {
    /**
     * The chunk is pulled.
     */
    200: Blob | File;
  };
  export type GetChunkResponse = GetChunkResponses[keyof GetChunkResponses];
  export type SaveChunkData = {
    body: Blob | File;
    path: {
      /**
       * ID of the transfer.
       */
      transferId: string;
      /**
       * ID of the chunk set.
       */
      chunksetId: string;
      /**
       * Id of the chunk.
       */
      chunkId: number;
    };
    query?: {
      /**
       * Indicates whether this chunk is media. Default is false.
       */
      isMedia?: boolean;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/content/v1/transfers/{transferId}/chunksets/{chunksetId}/chunks/{chunkId}';
  };
  export type SaveChunkErrors = {
    /**
     * Invalid transfer id, chunk set id, or chunk id.
     */
    400: unknown;
    /**
     * Invalid access token.
     */
    401: unknown;
    /**
     * Authorization failed (required role is missing).
     */
    403: unknown;
  };
  export type SaveChunkResponses = {
    /**
     * The chunk is pushed.
     */
    201: unknown;
  };
  export type CompleteChunkSetTransferData = {
    body?: never;
    path: {
      /**
       * ID of the transfer.
       */
      transferId: string;
      /**
       * ID of the chunk set.
       */
      chunksetId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/content/v1/transfers/{transferId}/chunksets/{chunksetId}/complete';
  };
  export type CompleteChunkSetTransferErrors = {
    /**
     * Invalid transfer id or chunk set id.
     */
    400: unknown;
    /**
     * Invalid access token.
     */
    401: unknown;
    /**
     * Authorization failed (required role is missing).
     */
    403: unknown;
  };
  export type CompleteChunkSetTransferResponses = {
    /**
     * Chunk set transfer completed.
     */
    200: {
      /**
       * The name of the content transfer file.
       */
      ContentTransferFileName: string;
    };
  };
  export type CompleteChunkSetTransferResponse =
    CompleteChunkSetTransferResponses[keyof CompleteChunkSetTransferResponses];
  export type DeleteContentTransferData = {
    body?: never;
    path: {
      /**
       * ID of the transfer to delete.
       */
      transferId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/content/v1/transfers/{transferId}';
  };
  export type DeleteContentTransferErrors = {
    /**
     * Invalid transfer id.
     */
    400: unknown;
    /**
     * Invalid access token.
     */
    401: unknown;
    /**
     * Authorization failed (required role is missing).
     */
    403: unknown;
  };
  export type DeleteContentTransferResponses = {
    /**
     * Transfer cleanup started.
     */
    202: unknown;
  };
  export type ConsumeFileData = {
    body?: never;
    path?: never;
    query: {
      /**
       * The name of the database (e.g., `master`).
       */
      databaseName: string;
      /**
       * The full path of the `.raif` file to consume.
       */
      fileName: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/items/v2/ConsumeFile';
  };
  export type ConsumeFileErrors = {
    /**
     * Invalid database name or file name.
     */
    400: unknown;
    /**
     * Invalid access token.
     */
    401: unknown;
    /**
     * Authorization failed (required role is missing).
     */
    403: unknown;
  };
  export type ConsumeFileResponses = {
    /**
     * Raif file consuming started.
     */
    202: unknown;
  };
  export type GetBlobStateData = {
    body?: never;
    path?: never;
    query: {
      /**
       * The full path of the `.raif` file to check the status.
       */
      fileName: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/items/v2/GetBlobState';
  };
  export type GetBlobStateErrors = {
    /**
     * Invalid file name.
     */
    400: unknown;
    /**
     * Invalid access token.
     */
    401: unknown;
    /**
     * Authorization failed (required role is missing).
     */
    403: unknown;
  };
  export type GetBlobStateResponses = {
    /**
     * File status successfully retrieved.
     */
    200: {
      /**
       * The status of the file (e.g., `OK`, `NotFound`, `Error`).
       */
      status?: string;
      /**
       * Additional details about the file status.
       */
      details?: {
        [key: string]: unknown;
      };
    };
  };
  export type GetBlobStateResponse = GetBlobStateResponses[keyof GetBlobStateResponses];
  export type ClientOptions = {
    baseUrl: 'https://example.com/authoring/transfer' | (string & {});
  };
}
