// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from '@hey-api/client-fetch';
import type { Xmapp } from './types.gen';
import { client as _heyApiClient } from './client.gen';

type RetrieveWorkflowStatisticsError = Xmapp.RetrieveWorkflowStatisticsError;

type RetrieveWorkflowStatisticsResponse = Xmapp.RetrieveWorkflowStatisticsResponse;

type RetrieveWorkflowStatisticsData = Xmapp.RetrieveWorkflowStatisticsData;

type UpdateSitemapConfigurationError = Xmapp.UpdateSitemapConfigurationError;

type UpdateSitemapConfigurationResponse = Xmapp.UpdateSitemapConfigurationResponse;

type UpdateSitemapConfigurationData = Xmapp.UpdateSitemapConfigurationData;

type RetrieveSitemapConfigurationError = Xmapp.RetrieveSitemapConfigurationError;

type RetrieveSitemapConfigurationResponse = Xmapp.RetrieveSitemapConfigurationResponse;

type RetrieveSitemapConfigurationData = Xmapp.RetrieveSitemapConfigurationData;

type RetrieveLocalizationStatisticsError = Xmapp.RetrieveLocalizationStatisticsError;

type RetrieveLocalizationStatisticsResponse = Xmapp.RetrieveLocalizationStatisticsResponse;

type RetrieveLocalizationStatisticsData = Xmapp.RetrieveLocalizationStatisticsData;

type UploadSiteThumbnailError = Xmapp.UploadSiteThumbnailError;

type UploadSiteThumbnailResponse = Xmapp.UploadSiteThumbnailResponse;

type UploadSiteThumbnailData = Xmapp.UploadSiteThumbnailData;

type ListSiteTemplatesError = Xmapp.ListSiteTemplatesError;

type ListSiteTemplatesResponse = Xmapp.ListSiteTemplatesResponse;

type ListSiteTemplatesData = Xmapp.ListSiteTemplatesData;

type GetRenderingHostsError = Xmapp.GetRenderingHostsError;

type GetRenderingHostsResponse = Xmapp.GetRenderingHostsResponse;

type GetRenderingHostsData = Xmapp.GetRenderingHostsData;

type UpdateHostError = Xmapp.UpdateHostError;

type UpdateHostResponse = Xmapp.UpdateHostResponse;

type UpdateHostData = Xmapp.UpdateHostData;

type RetrieveHostError = Xmapp.RetrieveHostError;

type RetrieveHostResponse = Xmapp.RetrieveHostResponse;

type RetrieveHostData = Xmapp.RetrieveHostData;

type DeleteHostError = Xmapp.DeleteHostError;

type DeleteHostData = Xmapp.DeleteHostData;

type CreateHostError = Xmapp.CreateHostError;

type CreateHostResponse = Xmapp.CreateHostResponse;

type CreateHostData = Xmapp.CreateHostData;

type ListHostsError = Xmapp.ListHostsError;

type ListHostsResponse = Xmapp.ListHostsResponse;

type ListHostsData = Xmapp.ListHostsData;

type ListPageChildrenError = Xmapp.ListPageChildrenError;

type ListPageChildrenResponse = Xmapp.ListPageChildrenResponse;

type ListPageChildrenData = Xmapp.ListPageChildrenData;

type ListPageAncestorsError = Xmapp.ListPageAncestorsError;

type ListPageAncestorsResponse = Xmapp.ListPageAncestorsResponse;

type ListPageAncestorsData = Xmapp.ListPageAncestorsData;

type RetrievePageHierarchyError = Xmapp.RetrievePageHierarchyError;

type RetrievePageHierarchyResponse = Xmapp.RetrievePageHierarchyResponse;

type RetrievePageHierarchyData = Xmapp.RetrievePageHierarchyData;

type RetrieveSiteHierarchyError = Xmapp.RetrieveSiteHierarchyError;

type RetrieveSiteHierarchyResponse = Xmapp.RetrieveSiteHierarchyResponse;

type RetrieveSiteHierarchyData = Xmapp.RetrieveSiteHierarchyData;

type DetachAnalyticsIdentifierError = Xmapp.DetachAnalyticsIdentifierError;

type DetachAnalyticsIdentifierResponse = Xmapp.DetachAnalyticsIdentifierResponse;

type DetachAnalyticsIdentifierData = Xmapp.DetachAnalyticsIdentifierData;

type ListCollectionSitesError = Xmapp.ListCollectionSitesError;

type ListCollectionSitesResponse = Xmapp.ListCollectionSitesResponse;

type ListCollectionSitesData = Xmapp.ListCollectionSitesData;

type ListTrackedSitesError = Xmapp.ListTrackedSitesError;

type ListTrackedSitesResponse = Xmapp.ListTrackedSitesResponse;

type ListTrackedSitesData = Xmapp.ListTrackedSitesData;

type ValidateSiteNameError = Xmapp.ValidateSiteNameError;

type ValidateSiteNameResponse = Xmapp.ValidateSiteNameResponse;

type ValidateSiteNameData = Xmapp.ValidateSiteNameData;

type SortSitesError = Xmapp.SortSitesError;

type SortSitesResponse = Xmapp.SortSitesResponse;

type SortSitesData = Xmapp.SortSitesData;

type RenameSiteError = Xmapp.RenameSiteError;

type RenameSiteResponse = Xmapp.RenameSiteResponse;

type RenameSiteData = Xmapp.RenameSiteData;

type CopySiteError = Xmapp.CopySiteError;

type CopySiteResponse = Xmapp.CopySiteResponse;

type CopySiteData = Xmapp.CopySiteData;

type UpdateSiteError = Xmapp.UpdateSiteError;

type UpdateSiteResponse = Xmapp.UpdateSiteResponse;

type UpdateSiteData = Xmapp.UpdateSiteData;

type RetrieveSiteError = Xmapp.RetrieveSiteError;

type RetrieveSiteResponse = Xmapp.RetrieveSiteResponse;

type RetrieveSiteData = Xmapp.RetrieveSiteData;

type DeleteSiteError = Xmapp.DeleteSiteError;

type DeleteSiteResponse = Xmapp.DeleteSiteResponse;

type DeleteSiteData = Xmapp.DeleteSiteData;

type CreateSiteError = Xmapp.CreateSiteError;

type CreateSiteResponse = Xmapp.CreateSiteResponse;

type CreateSiteData = Xmapp.CreateSiteData;

type ListSitesError = Xmapp.ListSitesError;

type ListSitesResponse = Xmapp.ListSitesResponse;

type ListSitesData = Xmapp.ListSitesData;

type RemoveFavoriteSiteError = Xmapp.RemoveFavoriteSiteError;

type RemoveFavoriteSiteData = Xmapp.RemoveFavoriteSiteData;

type UpdateLanguageError = Xmapp.UpdateLanguageError;

type UpdateLanguageResponse = Xmapp.UpdateLanguageResponse;

type UpdateLanguageData = Xmapp.UpdateLanguageData;

type DeleteLanguageError = Xmapp.DeleteLanguageError;

type DeleteLanguageResponse = Xmapp.DeleteLanguageResponse;

type DeleteLanguageData = Xmapp.DeleteLanguageData;

type ValidateCollectionNameError = Xmapp.ValidateCollectionNameError;

type ValidateCollectionNameResponse = Xmapp.ValidateCollectionNameResponse;

type ValidateCollectionNameData = Xmapp.ValidateCollectionNameData;

type SortCollectionsError = Xmapp.SortCollectionsError;

type SortCollectionsResponse = Xmapp.SortCollectionsResponse;

type SortCollectionsData = Xmapp.SortCollectionsData;

type RenameCollectionError = Xmapp.RenameCollectionError;

type RenameCollectionResponse = Xmapp.RenameCollectionResponse;

type RenameCollectionData = Xmapp.RenameCollectionData;

type AggregatePageDataError = Xmapp.AggregatePageDataError;

type AggregatePageDataResponse = Xmapp.AggregatePageDataResponse;

type AggregatePageDataData = Xmapp.AggregatePageDataData;

type AggregateLivePageVariantsError = Xmapp.AggregateLivePageVariantsError;

type AggregateLivePageVariantsResponse = Xmapp.AggregateLivePageVariantsResponse;

type AggregateLivePageVariantsData = Xmapp.AggregateLivePageVariantsData;

type RetrieveJobError = Xmapp.RetrieveJobError;

type RetrieveJobResponse = Xmapp.RetrieveJobResponse;

type RetrieveJobData = Xmapp.RetrieveJobData;

type ListJobsError = Xmapp.ListJobsError;

type ListJobsResponse = Xmapp.ListJobsResponse;

type ListJobsData = Xmapp.ListJobsData;

type AddFavoriteSiteError = Xmapp.AddFavoriteSiteError;

type AddFavoriteSiteResponse = Xmapp.AddFavoriteSiteResponse;

type AddFavoriteSiteData = Xmapp.AddFavoriteSiteData;

type GetFavoriteSitesError = Xmapp.GetFavoriteSitesError;

type GetFavoriteSitesResponse = Xmapp.GetFavoriteSitesResponse;

type GetFavoriteSitesData = Xmapp.GetFavoriteSitesData;

type UpdateCollectionError = Xmapp.UpdateCollectionError;

type UpdateCollectionResponse = Xmapp.UpdateCollectionResponse;

type UpdateCollectionData = Xmapp.UpdateCollectionData;

type RetrieveCollectionError = Xmapp.RetrieveCollectionError;

type RetrieveCollectionResponse = Xmapp.RetrieveCollectionResponse;

type RetrieveCollectionData = Xmapp.RetrieveCollectionData;

type DeleteCollectionError = Xmapp.DeleteCollectionError;

type DeleteCollectionResponse = Xmapp.DeleteCollectionResponse;

type DeleteCollectionData = Xmapp.DeleteCollectionData;

type CreateCollectionError = Xmapp.CreateCollectionError;

type CreateCollectionResponse = Xmapp.CreateCollectionResponse;

type CreateCollectionData = Xmapp.CreateCollectionData;

type ListCollectionsError = Xmapp.ListCollectionsError;

type ListCollectionsResponse = Xmapp.ListCollectionsResponse;

type ListCollectionsData = Xmapp.ListCollectionsData;

type GetLivePageStateError = Xmapp.GetLivePageStateError;

type GetLivePageStateData = Xmapp.GetLivePageStateData;

type ListPageVariantsError = Xmapp.ListPageVariantsError;

type ListPageVariantsResponse = Xmapp.ListPageVariantsResponse;

type ListPageVariantsData = Xmapp.ListPageVariantsData;

type ListSupportedLanguagesError = Xmapp.ListSupportedLanguagesError;

type ListSupportedLanguagesResponse = Xmapp.ListSupportedLanguagesResponse;

type ListSupportedLanguagesData = Xmapp.ListSupportedLanguagesData;

type CreateLanguageError = Xmapp.CreateLanguageError;

type CreateLanguageResponse = Xmapp.CreateLanguageResponse;

type CreateLanguageData = Xmapp.CreateLanguageData;

type ListLanguagesError = Xmapp.ListLanguagesError;

type ListLanguagesResponse = Xmapp.ListLanguagesResponse;

type ListLanguagesData = Xmapp.ListLanguagesData;

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List languages
 * Retrieves the list of languages added to the environment.
 */
export const listLanguages = <ThrowOnError extends boolean = false>(
  options?: Options<ListLanguagesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListLanguagesResponse,
    ListLanguagesError,
    ThrowOnError
  >({
    url: '/api/v1/languages',
    ...options,
  });
};

/**
 * Add a language
 * Adds a language to your environment, so you can create content and build websites in that language. You can choose from the language supported by Sitecore XM Cloud. If you do not know the language code of the language, first retrieve the list of languages supported in Sitecore XM Cloud.
 * To add a language to the system, you must provide the language code. You can optionally input additional parameters, such as region code and spell checker.
 * If you want to add a custom language not in the default cultures, register it as a custom culture (as described in .NET CultureInfo class) and update the LanguageDefinitions.config file.
 */
export const createLanguage = <ThrowOnError extends boolean = false>(
  options: Options<CreateLanguageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateLanguageResponse,
    CreateLanguageError,
    ThrowOnError
  >({
    url: '/api/v1/languages',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List supported languages
 * Retrieves the list of languages supported by Sitecore XM Cloud, and associated data.
 */
export const listSupportedLanguages = <ThrowOnError extends boolean = false>(
  options?: Options<ListSupportedLanguagesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListSupportedLanguagesResponse,
    ListSupportedLanguagesError,
    ThrowOnError
  >({
    url: '/api/v1/languages/supported',
    ...options,
  });
};

/**
 * List live variant identifiers for a page
 * Fetches the identifiers of currently active personalization variants for a page.
 */
export const listPageVariants = <ThrowOnError extends boolean = false>(
  options: Options<ListPageVariantsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListPageVariantsResponse,
    ListPageVariantsError,
    ThrowOnError
  >({
    url: '/api/v1/pages/{pageId}/live/variants',
    ...options,
  });
};

/**
 * Checks if a page is active
 * Checks if the requested page is active.
 */
export const getLivePageState = <ThrowOnError extends boolean = false>(
  options: Options<GetLivePageStateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<unknown, GetLivePageStateError, ThrowOnError>({
    url: '/api/v1/pages/{pageId}/live',
    ...options,
  });
};

/**
 * List site collections
 * Fetches the list of site collections in the environment, with associated details.
 */
export const listCollections = <ThrowOnError extends boolean = false>(
  options?: Options<ListCollectionsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCollectionsResponse,
    ListCollectionsError,
    ThrowOnError
  >({
    url: '/api/v1/collections',
    ...options,
  });
};

/**
 * Create a site collection
 * Creates a collection by specifying a name and, optionally, a display name and description.
 */
export const createCollection = <ThrowOnError extends boolean = false>(
  options?: Options<CreateCollectionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateCollectionResponse,
    CreateCollectionError,
    ThrowOnError
  >({
    url: '/api/v1/collections',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete a site collection
 * Deletes a site collection, including sites in that collection.
 */
export const deleteCollection = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCollectionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCollectionResponse,
    DeleteCollectionError,
    ThrowOnError
  >({
    url: '/api/v1/collections/{collectionId}',
    ...options,
  });
};

/**
 * Retrieve a site collection
 * Fetches information about a site collection.
 */
export const retrieveCollection = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveCollectionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrieveCollectionResponse,
    RetrieveCollectionError,
    ThrowOnError
  >({
    url: '/api/v1/collections/{collectionId}',
    ...options,
  });
};

/**
 * Update a site collection
 * Updates the display name and the description of the site collection. To change the system name of a collection, see [rename a site collection](#tag/Collections/operation/Rename).
 */
export const updateCollection = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCollectionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateCollectionResponse,
    UpdateCollectionError,
    ThrowOnError
  >({
    url: '/api/v1/collections/{collectionId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List favorite sites
 * Fetches a list of your favorite sites
 */
export const getFavoriteSites = <ThrowOnError extends boolean = false>(
  options?: Options<GetFavoriteSitesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetFavoriteSitesResponse,
    GetFavoriteSitesError,
    ThrowOnError
  >({
    url: '/api/v1/favorites/sites',
    ...options,
  });
};

/**
 * Adds a site to favorites
 * Adds a site to your list of favorites
 */
export const addFavoriteSite = <ThrowOnError extends boolean = false>(
  options: Options<AddFavoriteSiteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AddFavoriteSiteResponse,
    AddFavoriteSiteError,
    ThrowOnError
  >({
    url: '/api/v1/favorites/sites',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List site job statuses
 * Fetches information about background jobs. Returns empty array if no jobs are running.
 */
export const listJobs = <ThrowOnError extends boolean = false>(
  options?: Options<ListJobsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<ListJobsResponse, ListJobsError, ThrowOnError>({
    url: '/api/v1/jobs',
    ...options,
  });
};

/**
 * Retrieve a job status
 * Fetches information about a background job.
 */
export const retrieveJob = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveJobData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<RetrieveJobResponse, RetrieveJobError, ThrowOnError>(
    {
      url: '/api/v1/jobs/{jobHandle}/status',
      ...options,
    },
  );
};

/**
 * Aggregate personalization variants for multiple pages
 * Returns currently active personalization variants for the requested pages.
 */
export const aggregateLivePageVariants = <ThrowOnError extends boolean = false>(
  options?: Options<AggregateLivePageVariantsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AggregateLivePageVariantsResponse,
    AggregateLivePageVariantsError,
    ThrowOnError
  >({
    url: '/api/v1/aggregation/pages/live/variants',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Aggregate page data
 * Aggregates data about multiple pages and their components.
 */
export const aggregatePageData = <ThrowOnError extends boolean = false>(
  options?: Options<AggregatePageDataData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AggregatePageDataResponse,
    AggregatePageDataError,
    ThrowOnError
  >({
    url: '/api/v1/aggregation/pages',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Rename a site collection
 * Changes the system name of a site collection.
 */
export const renameCollection = <ThrowOnError extends boolean = false>(
  options: Options<RenameCollectionData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RenameCollectionResponse,
    RenameCollectionError,
    ThrowOnError
  >({
    url: '/api/v1/collections/{collectionId}/rename',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Sort site collections
 * By assigning a sort value to site collection IDs, you can use this endpoint to apply an order by which collections are sorted in the Sites user interface and in Content Editor. The lower the sort value, the higher the site appears in the interface.
 */
export const sortCollections = <ThrowOnError extends boolean = false>(
  options: Options<SortCollectionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SortCollectionsResponse,
    SortCollectionsError,
    ThrowOnError
  >({
    url: '/api/v1/collections/sort',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Validate site collection name
 * Validates a site collection name to ensure it meets the required criteria. The validations applied to the collection name:
 * - Is a string and can't be null.
 * - Is unique.
 * - The length of the name is a maximum of 50 characters.
 * - Can't start or end with a space.
 * - Can't start with a dash.
 * - Can include Latin alphanumeric characters, spaces and dashes.
 */
export const validateCollectionName = <ThrowOnError extends boolean = false>(
  options: Options<ValidateCollectionNameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ValidateCollectionNameResponse,
    ValidateCollectionNameError,
    ThrowOnError
  >({
    url: '/api/v1/collections/name/validate',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete a language
 * Deletes a language from the XM Cloud environment.
 * To delete a language from the system, you must provide the regional ISO code of the language. If you do not know the ISO code of the language, first retrieve the list of languages added to the environment.
 */
export const deleteLanguage = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLanguageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteLanguageResponse,
    DeleteLanguageError,
    ThrowOnError
  >({
    url: '/api/v1/languages/{isoCode}',
    ...options,
  });
};

/**
 * Update a language
 * Updates a [language supported](https://doc.sitecore.com/xmc/en/users/xm-cloud/add-a-language-to-your-xm-cloud-environment.html#add-a-custom-language) by Sitecore XM Cloud.
 * To update a language, you must provide the regional ISO code of the language. If you do not know the ISO code of the language, first retrieve the list of languages supported in Sitecore XM Cloud.
 */
export const updateLanguage = <ThrowOnError extends boolean = false>(
  options: Options<UpdateLanguageData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateLanguageResponse,
    UpdateLanguageError,
    ThrowOnError
  >({
    url: '/api/v1/languages/{isoCode}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Remove site from favorites
 * Removes a site from your list of favorites
 */
export const removeFavoriteSite = <ThrowOnError extends boolean = false>(
  options: Options<RemoveFavoriteSiteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<unknown, RemoveFavoriteSiteError, ThrowOnError>({
    url: '/api/v1/favorites/sites/{siteId}',
    ...options,
  });
};

/**
 * List sites
 * Fetches the list of sites in the environment, with associated details.
 */
export const listSites = <ThrowOnError extends boolean = false>(
  options?: Options<ListSitesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<ListSitesResponse, ListSitesError, ThrowOnError>({
    url: '/api/v1/sites',
    ...options,
  });
};

/**
 * Create a site
 * [Creates a site](https://doc.sitecore.com/xmc/en/users/xm-cloud/create-a-site.html) for the environment.
 * Sites are created using  [site templates](https://doc.sitecore.com/xmc/en/developers/xm-cloud/create-a-site-template-for-the-xm-cloud-dashboard.html). Every site belongs to a [site collection](https://doc.sitecore.com/xmc/en/users/xm-cloud/create-a-site-collection.html). You can either create a site inside an existing collection or create a new one.
 * It is also possible to create a site by duplicating a site.
 */
export const createSite = <ThrowOnError extends boolean = false>(
  options: Options<CreateSiteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<CreateSiteResponse, CreateSiteError, ThrowOnError>({
    url: '/api/v1/sites',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete a site
 * Deletes a site, including its pages, settings, media files, data sources, presentation elements, dictionaries, components, variants, and page designs. Everyone in the environment will lose access to the deleted site.
 * Deleting a site affects related websites in the collection:
 * • If the site [shares](https://doc.sitecore.com/xmc/en/users/xm-cloud/create-a-site.html#share-a-site) items with other sites, this might result in broken links.
 * • Items that are cloned to other sites are turned into regular items, and the links removed.
 */
export const deleteSite = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSiteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteSiteResponse,
    DeleteSiteError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}',
    ...options,
  });
};

/**
 * Retrieve a site
 * Fetches information about a site.
 */
export const retrieveSite = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveSiteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrieveSiteResponse,
    RetrieveSiteError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}',
    ...options,
  });
};

/**
 * Update a site
 * Updates various parameters of a site. To change the name of a site, see [rename a site](#tag/Sites/operation/Rename).
 */
export const updateSite = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSiteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<UpdateSiteResponse, UpdateSiteError, ThrowOnError>(
    {
      url: '/api/v1/sites/{siteId}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    },
  );
};

/**
 * Duplicate a site
 * You can create a site by duplicating an existing one. When you duplicate a site, its content items (such as pages and images, folder structure, and links) are copied. Most of the settings are also copied, but you can change those later. The new site's path parameters and response body schema will be the same as the original site.
 */
export const copySite = <ThrowOnError extends boolean = false>(
  options: Options<CopySiteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<CopySiteResponse, CopySiteError, ThrowOnError>({
    url: '/api/v1/sites/{siteId}/copy',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Rename a site
 * Changes the system name of a site.
 */
export const renameSite = <ThrowOnError extends boolean = false>(
  options: Options<RenameSiteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<RenameSiteResponse, RenameSiteError, ThrowOnError>({
    url: '/api/v1/sites/{siteId}/rename',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Sort sites
 * By assigning a sort value to site IDs, you can use this endpoint to apply an order by which sites are sorted in the Sites user interface and in Content Editor. The lower the sort value, the higher the site appears in the interface.
 */
export const sortSites = <ThrowOnError extends boolean = false>(
  options: Options<SortSitesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<SortSitesResponse, SortSitesError, ThrowOnError>({
    url: '/api/v1/sites/sort',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Validate site name
 * Validates a site name to ensure it meets the required criteria. The validations applied to the site name:
 * - Is a string and can't be null.
 * - Is unique.
 * - The length of the name is a maximum of 50 characters.
 * - Can't start or end with a space.
 * - Can't start with a dash.
 * - Can include Latin alphanumeric characters, spaces and dashes.
 */
export const validateSiteName = <ThrowOnError extends boolean = false>(
  options: Options<ValidateSiteNameData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ValidateSiteNameResponse,
    ValidateSiteNameError,
    ThrowOnError
  >({
    url: '/api/v1/sites/name/validate',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List sites that use an analytics identifier
 * Fetches a list of sites that use an [analytics identifier](https://doc.sitecore.com/xmc/en/users/xm-cloud/manage-personalization-and-analytics-for-sites.html).
 */
export const listTrackedSites = <ThrowOnError extends boolean = false>(
  options: Options<ListTrackedSitesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListTrackedSitesResponse,
    ListTrackedSitesError,
    ThrowOnError
  >({
    url: '/api/v1/sites/analytics-identifiers/{analyticsIdentifier}',
    ...options,
  });
};

/**
 * List sites in a site collection
 * Fetches a list of sites in a site collection.
 */
export const listCollectionSites = <ThrowOnError extends boolean = false>(
  options: Options<ListCollectionSitesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListCollectionSitesResponse,
    ListCollectionSitesError,
    ThrowOnError
  >({
    url: '/api/v1/collections/{collectionId}/sites',
    ...options,
  });
};

/**
 * Unassign analytics identifiers from sites
 * Removes the analytics identifiers from one or more sites.
 */
export const detachAnalyticsIdentifier = <ThrowOnError extends boolean = false>(
  options: Options<DetachAnalyticsIdentifierData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    DetachAnalyticsIdentifierResponse,
    DetachAnalyticsIdentifierError,
    ThrowOnError
  >({
    url: '/api/v1/sites/analytics-identifiers/{analyticsIdentifier}/detach',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Retrieve the hierarchy of a site's main page
 * Fetches hierarchy information about the main page of a site, including its children, ancestors, and siblings.
 */
export const retrieveSiteHierarchy = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveSiteHierarchyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrieveSiteHierarchyResponse,
    RetrieveSiteHierarchyError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}/hierarchy',
    ...options,
  });
};

/**
 * Retrieve the hierarchy of a page
 * Fetches hierarchy information about a page, including its children, ancestors, and siblings.
 */
export const retrievePageHierarchy = <ThrowOnError extends boolean = false>(
  options: Options<RetrievePageHierarchyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrievePageHierarchyResponse,
    RetrievePageHierarchyError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}/hierarchy/{pageId}',
    ...options,
  });
};

/**
 * List ancestors for a page
 * Fetches information about the ancestors of a page.
 */
export const listPageAncestors = <ThrowOnError extends boolean = false>(
  options: Options<ListPageAncestorsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListPageAncestorsResponse,
    ListPageAncestorsError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}/hierarchy/{pageId}/ancestors',
    ...options,
  });
};

/**
 * List children for a page
 * Fetches information about the children of a page.
 */
export const listPageChildren = <ThrowOnError extends boolean = false>(
  options: Options<ListPageChildrenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ListPageChildrenResponse,
    ListPageChildrenError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}/hierarchy/{pageId}/children',
    ...options,
  });
};

/**
 * List hosts for a site
 * Retrieves the list of hosts for a site.
 */
export const listHosts = <ThrowOnError extends boolean = false>(
  options: Options<ListHostsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<ListHostsResponse, ListHostsError, ThrowOnError>({
    url: '/api/v1/sites/{siteId}/hosts',
    ...options,
  });
};

/**
 * Create a site host
 * Creates a host for a site.
 */
export const createHost = <ThrowOnError extends boolean = false>(
  options: Options<CreateHostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<CreateHostResponse, CreateHostError, ThrowOnError>({
    url: '/api/v1/sites/{siteId}/hosts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete a site host by host ID
 * Deletes a site using a hostID. Deletes a site, including its pages, settings, media files, data sources, presentation elements, dictionaries, components, variants, and page designs. Everyone in the environment will lose access to the deleted site.
 */
export const deleteHost = <ThrowOnError extends boolean = false>(
  options: Options<DeleteHostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<unknown, DeleteHostError, ThrowOnError>({
    url: '/api/v1/sites/{siteId}/hosts/{hostId}',
    ...options,
  });
};

/**
 * Retrieve a site host by host ID
 * Fetches details about a site host.
 */
export const retrieveHost = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveHostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrieveHostResponse,
    RetrieveHostError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}/hosts/{hostId}',
    ...options,
  });
};

/**
 * Update a host by host ID
 * Modifies the properties of a host.
 */
export const updateHost = <ThrowOnError extends boolean = false>(
  options: Options<UpdateHostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<UpdateHostResponse, UpdateHostError, ThrowOnError>(
    {
      url: '/api/v1/sites/{siteId}/hosts/{hostId}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    },
  );
};

/**
 * List rendering hosts for a site
 * Fetches a list of rendering hosts for a site.
 */
export const getRenderingHosts = <ThrowOnError extends boolean = false>(
  options: Options<GetRenderingHostsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRenderingHostsResponse,
    GetRenderingHostsError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}/renderinghosts',
    ...options,
  });
};

/**
 * List site templates
 * Gets the site templates available in the environment that can be used for creating sites. Learn more about [site templates](https://doc.sitecore.com/xmc/en/developers/xm-cloud/create-a-site-template-for-the-xm-cloud-dashboard.html).
 */
export const listSiteTemplates = <ThrowOnError extends boolean = false>(
  options?: Options<ListSiteTemplatesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ListSiteTemplatesResponse,
    ListSiteTemplatesError,
    ThrowOnError
  >({
    url: '/api/v1/sites/templates',
    ...options,
  });
};

/**
 * Upload a thumbnail for a site
 * Uploads an image to be used as [thumbnail](https://doc.sitecore.com/xmc/en/users/ea-xm-cloud/manage-sites.html#manage-general-site-settings) for a site when it is displayed in the [XM Cloud Sites application](https://doc.sitecore.com/xmc/en/users/xm-cloud/sites.html).
 */
export const uploadSiteThumbnail = <ThrowOnError extends boolean = false>(
  options: Options<UploadSiteThumbnailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UploadSiteThumbnailResponse,
    UploadSiteThumbnailError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    url: '/api/v1/sites/{siteId}/upload-thumbnail',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
  });
};

/**
 * List localization statistics for a site
 * Fetches localization statistics for a site, including the number of pages in each locale.
 */
export const retrieveLocalizationStatistics = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveLocalizationStatisticsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrieveLocalizationStatisticsResponse,
    RetrieveLocalizationStatisticsError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}/statistics/localization',
    ...options,
  });
};

/**
 * Retrieve the sitemap configuration
 * Fetches a [sitemap](https://doc.sitecore.com/xmc/en/developers/xm-cloud/configure-a-sitemap.html) configuration.
 */
export const retrieveSitemapConfiguration = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveSitemapConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrieveSitemapConfigurationResponse,
    RetrieveSitemapConfigurationError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}/configuration/sitemap',
    ...options,
  });
};

/**
 * Update a sitemap configuration
 * Updates a [sitemap](https://doc.sitecore.com/xmc/en/developers/xm-cloud/configure-a-sitemap.html) configuration.
 */
export const updateSitemapConfiguration = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSitemapConfigurationData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UpdateSitemapConfigurationResponse,
    UpdateSitemapConfigurationError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}/configuration/sitemap',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * List workflow statistics for a site
 * Fetches the workflows defined for a site, their states, and the number of pages in each state.
 */
export const retrieveWorkflowStatistics = <ThrowOnError extends boolean = false>(
  options: Options<RetrieveWorkflowStatisticsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    RetrieveWorkflowStatisticsResponse,
    RetrieveWorkflowStatisticsError,
    ThrowOnError
  >({
    url: '/api/v1/sites/{siteId}/statistics/workflow',
    ...options,
  });
};
