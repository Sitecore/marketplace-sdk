// This file is auto-generated by @hey-api/openapi-ts

export namespace Xmapp {
  /**
   * The details of the site to add to favorites.
   */
  export type AddFavoriteSiteInput = {
    /**
     * The site identifier..
     * Example value: 110d559fdea542ea9c1c8a5df7e70ef9
     */
    favoriteSiteId: string;
  };
  export type AddLanguageModel = {
    /**
     * The character encoding, that specifies how characters are represented in a document or web page.
     * Example value: iso-8859-1
     */
    charset?: string | null;
    /**
     * Code Page
     * Example value: 65001
     */
    codePage?: string | null;
    /**
     * If you wish to support a nonstandard country or region code, you can provide a custom language code.
     * Example value: en-EU
     */
    customCode?: string | null;
    /**
     * Database
     * Example value: master
     */
    database?: string | null;
    /**
     * Example value: utf-8
     * Example value: utf-8
     */
    encoding?: string | null;
    /**
     * The ISO code for the language.
     * Example value: en
     */
    languageCode: string;
    /**
     * The name that will be used for the language.
     * Example value: en-US
     */
    name?: string | null;
    /**
     * The regional ISO code of the language. Example values: US for the USA, or DK for Denmark.
     * Example value: US
     */
    regionCode?: string | null;
    /**
     * If you wish to configure fallback for the new language, add the ISO language code for the fallback language.
     * Example value: en
     */
    fallbackLanguage?: string | null;
    /**
     * A reference to the dictionary file name that you want to use to spellcheck in the new language.
     * Example value: en-US.tdf
     */
    spellChecker?: string | null;
  };
  /**
   * An Analytics tracker identifer for a site.
   */
  export type AnalyticsIdentifier = {
    /**
     * The name of the analytics identifier.
     * Example value: skate-park
     */
    name: string;
    /**
     * The language for the analytics identifier.
     * Example value: en
     */
    language: string;
  };
  export type ComponentAggregationResponse = {
    /**
     * The component identifier.
     * Example value: 86a03271-dff4-470a-92bd-b68c67de2e25
     */
    id?: string | null;
    /**
     * The unique identifier of the component on this page. The UID is assigned to the component when it's added to the page.
     * Example value: 3d42bec0-60ad-45f3-a8f7-ddb6a5543c34
     */
    uid?: string | null;
    /**
     * The component name.
     * Example value: RichText
     */
    name?: string | null;
    /**
     * The display name of the component for the specified language.
     * Example value: Rich Text
     */
    displayName?: string | null;
  };
  /**
   * A site duplication request.
   */
  export type CopySiteInput = {
    /**
     * Name for the new site.
     * Example value: skate-park
     */
    name: string;
    /**
     * Display name for the new site.
     * Example value: Skate Park
     */
    displayName?: string | null;
    /**
     * Description for the new site.
     * Example value: Sample showcase website description.
     */
    description?: string | null;
    /**
     * Analytics identifiers for the new site.
     */
    posMappings?: Array<AnalyticsIdentifier> | null;
  };
  /**
   * A host creation request
   */
  export type CreateHostInput = {
    /**
     * The name of the new host.
     * Example value: skate-park
     */
    name: string;
    /**
     * One or more hostnames.
     * Example value: [
     * "dev.skate-park.com",
     * "uat.skate-park.com"
     * ]
     */
    hostnames?: Array<string> | null;
    /**
     * The target hostname.
     * Example value: www.skate-park.com
     */
    targetHostname?: string | null;
    /**
     * The rendering host.
     * Example value: Default
     */
    renderingHost?: string | null;
    /**
     * The identifier of the home page.
     * Example value: 110d559fdea542ea9c1c8a5df7e70ef9
     */
    homePageId?: string | null;
    /**
     * The thumbnail information.
     */
    thumbnail?: string | null;
    /**
     * The list of analytics tracker identifiers mapped to the host, per language.
     */
    analyticsIdentifiers?: Array<AnalyticsIdentifier> | null;
    /**
     * The host settings collection.
     */
    settings?: {
      [key: string]: string;
    } | null;
    languageSettings?: SiteLanguageSettings;
  };
  /**
   * A site collection creation request.
   */
  export type CreateSiteCollectionInput = {
    /**
     * The unique system name of the new collection.
     * Example value: skate-brand-sites
     */
    name: string;
    /**
     * A short, meaningful name for the collection.
     * Example value: Skate Brand Websites
     */
    displayName?: string | null;
    /**
     * A longer, more detailed description of the collection.
     * Example value: Collection for all Skate Park brand websites.
     */
    description?: string | null;
  };
  /**
   * Analytics identifier detach request.
   */
  export type DetachFromSitesInput = {
    /**
     * The list of sites, based on their identifier, for which the analytic identifier should be unassigned.
     */
    sitesIdentifiers: Array<string>;
  };
  export type EditLanguageInput = {
    languageCode?: string | null;
    regionCode?: string | null;
    fallbackLanguageIso?: string | null;
    baseIsoCultureCode?: string | null;
    fallbackRegionDisplayName?: string | null;
  };
  /**
   * The error page response entity.
   */
  export type ErrorPage = {
    /**
     * The identifier of the page.
     * Example value: 68900348a3b84eb8ac7df4d179c25727
     */
    id?: string | null;
    /**
     * The path for the page.
     * Example value: Sitecore/Content/Home/Categories/Products/MyProduct
     */
    path?: string | null;
  };
  /**
   * An object containing the site error pages identifiers
   */
  export type ErrorPages = {
    /**
     * The identifier of the site's 500 error page. You can get page identifiers by calling the /hierarchy endpoint.
     * Example value: c5a2fe31-46bd-34ae-91fb-d3c24b5a6e7f
     */
    errorPage?: string | null;
    /**
     * The identifier of the site's 404 error page. You can get page identifiers by calling the /hierarchy endpoint.
     * Example value: a2fc5e31-6b4d-a43e-9f1b-c2d34b5a6e7f
     */
    notFoundPage?: string | null;
  };
  /**
   * An object containing the site error pages
   */
  export type ErrorPagesConfiguration = {
    errorPage?: ErrorPage;
    notFoundPage?: ErrorPage;
  };
  /**
   * A host response entity
   */
  export type Host = {
    /**
     * The host ID.
     * Example value: 5aae1eeaea2440bf96f11f43da82c77b
     */
    id?: string | null;
    /**
     * The name of the site host.
     * Example value: skate-park
     */
    name?: string | null;
    /**
     * One or more hostnames.
     * Example value: [
     * "dev.skate-park.com",
     * "uat.skate-park.com"
     * ]
     */
    hostnames?: Array<string> | null;
    /**
     * The target hostname.
     * Example value: www.skate-park.com
     */
    targetHostname?: string | null;
    /**
     * The identifier of the home page.
     * Example value: 5aae1eeaea2440bf96f11f43da82c77b
     */
    homePageId?: string | null;
    renderingHost?: RenderingHost;
    permissions?: Permissions;
    /**
     * The host settings collection.
     */
    settings?: {
      [key: string]: string;
    } | null;
    /**
     * Readonly host properties collection.
     */
    properties?: {
      [key: string]: string;
    } | null;
    /**
     * The list of analytics tracker identifiers mapped to the host, per language.
     * Example value: [
     * {
     * "name": "skate-park",
     * "language": "en-US"
     * }
     * ]
     */
    analyticsIdentifiers?: {
      [key: string]: string;
    } | null;
    languageSettings?: SiteLanguageSettings;
    /**
     * The date when the host was created.
     * Example value: 2019-08-24T14:15:22Z
     */
    created?: string | null;
    /**
     * The ID of the user who created the host.
     * Example value: L6kfw52ZVf
     */
    createdBy?: string | null;
  };
  /**
   * A job response entity.
   */
  export type Job = {
    /**
     * The name of the job.
     * Example value: Create site
     */
    name?: string | null;
    /**
     * Indicates whether the job has finished.
     */
    done?: boolean;
    /**
     * A timestamp of when the job was added to the queue.
     * Example value: 2024-06-12T01:47:37.316Z
     */
    queueTime?: string;
    /**
     * The handle of the job.
     * Example value: 4d97d35a-b605-4fc6-8a03-5bb8e403cdaf;customer-tenant-env
     */
    handle?: string | null;
    /**
     * The name of the site.
     * Example value: new-site
     */
    site?: string | null;
    /**
     * The identifier or name of the site collection.
     * Example value: {81D27BA9-F798-4190-8536-CA20203AA6EA}
     */
    siteCollection?: string | null;
  };
  /**
   * Language
   */
  export type Language = {
    /**
     * The identifier of the language.
     * Example value: af58419145c9420187405409f4cf8bdd
     */
    id?: string | null;
    /**
     * The ISO code of the language.
     * Example value: en
     */
    iso?: string | null;
    /**
     * The regional ISO code of the language, for example, US for the USA, or DK for Denmark.
     * Example value: en-US
     */
    regionalIsoCode?: string | null;
    /**
     * The ISO code of the fallback language
     * Example value: en
     */
    fallbackLanguageIso?: string | null;
    /**
     * The ISO language code (e.g., "en" for English, "es" for Spanish).
     * Example value: en-US
     */
    name?: string | null;
    /**
     * The human-readable name of the language as it appears in the user interface, for example, "English" or "Espa√±ol."
     * Example value: English (United States) : English (United States)
     */
    displayName?: string | null;
    /**
     * The language name in its original script or characters. For instance, "English" would be displayed as "English" itself, but "Êó•Êú¨Ë™û" would appear as "Êó•Êú¨Ë™û."
     * Example value: English (United States)
     */
    nativeName?: string | null;
    /**
     * The language name in English, regardless of the language being described. For example, "Deutsch" would be displayed as "German."
     * Example value: English (United States)
     */
    englishName?: string | null;
    /**
     * Base ISO culture code. If this is a custom language, this ISO culture code will represent the language code used as the base of this language.
     * For example, if the custom language uses the same writing system, calendar, and date format as American English, the value would be 'en-US'.
     * Example value: en-US
     */
    baseIsoCultureCode?: string | null;
    /**
     * If this is a custom language, the Fallback Region Display Name respresents the region name that should be displayed.
     * Example value: North America
     */
    fallbackRegionDisplayName?: string | null;
  };
  /**
   * Data for the site locales.
   */
  export type LanguageData = {
    /**
     * The display name of the language.
     * Example value: Japanese (Japan) : Êó•Êú¨Ë™û (Êó•Êú¨)
     */
    displayName?: string | null;
    /**
     * The language name in English, regardless of the language being described. For example, "Deutsch" would be displayed as "German."
     * Example value: English (United States)
     */
    englishName?: string | null;
    /**
     * The language code of the locale.
     * Example value: ja-JP
     */
    locale?: string | null;
  };
  /**
   * Represents the statistics for a locale.
   */
  export type LocaleStatistics = {
    data?: LanguageData;
    /**
     * The number of pages in this locale.
     * Example value: 60
     */
    pageCount?: number;
  };
  /**
   * Represents the localization statistics for a site.
   */
  export type LocalizationStatistics = {
    /**
     * A collection of locales defined for the site and their statistics.
     */
    locales?: Array<LocaleStatistics> | null;
    /**
     * The total number of pages across all locales.
     * Example value: 60
     */
    totalPageCount?: number;
  };
  export type NameValidationResult = {
    /**
     * indicates whether the name is valid.
     */
    isValid?: boolean;
    /**
     * details about the request.
     */
    message?: string | null;
  };
  /**
   * A site creation request.
   */
  export type NewSiteInput = {
    /**
     * The name of the site.
     * Example value: skate-park
     */
    siteName: string;
    /**
     * The display name for the site.
     * Example value: Skate Park Site
     */
    displayName?: string | null;
    /**
     * The ID of the template used to create the site. If you don't know the template ID, first [retrieve site templates](#tag/Sites/operation/GetTemplates).
     * Example value: 5aae1eeaea2440bf96f11f43da82c77b
     */
    templateId: string;
    /**
     * The ID of the collection you want the new site to belong to. If you don't know the collection ID, first [retrieve collections](#tag/Collections/operation/Get).
     * Required if Sitecore.XmApps.Sites.Models.REST.NewSiteInput.CollectionName is not provided. If left empty, you must provide collectionName instead and a new collection will be created along with the newly created site.
     * If both collectionId and collectionName are provided, collectionName will be ignored.
     * Example value: 5aae1eeaea2440bf96f11f43da82c77b
     */
    collectionId?: string | null;
    /**
     * The language for the site. If you do not know what languages are available in the environment, first [retrieve the list of languages](#tag/Languages/operation/Get).
     * If the language you want is not available in the environment, [add the language](#tag/Languages/operation/Create) first.
     * Example value: en
     */
    language: string;
    /**
     * The list of supported languages for the site.
     * Example value: [
     * "en",
     * "da"
     * ]
     */
    languages?: Array<string> | null;
    /**
     * Optional hostname for the new site. Default value: *
     * Example value: dev.skate-park.com
     */
    hostName?: string | null;
    /**
     * Optional text that provides a meaningful description of the site.
     * Example value: New site for Brand A in English-speaking countries.
     */
    description?: string | null;
    /**
     * The name of the new collection you want the new site to belong to.
     * Required if Sitecore.XmApps.Sites.Models.REST.NewSiteInput.CollectionId is not provided. If left empty, you must provide collectionId of an existing collection you want the new site to belong to.
     * If both collectionId and collectionName are provided, collectionName will be ignored.
     * Example value: Brand A
     */
    collectionName?: string | null;
    /**
     * The display name for the collection.
     * Example value: Skate Park Site
     */
    collectionDisplayName?: string | null;
    /**
     * If you want to create a new site collection while creating a new site, you can provide a collection description.
     * Example value: Sample description for the site collection containing Sites for Brand A
     */
    collectionDescription?: string | null;
    /**
     * The [site identifier](https://doc.sitecore.com/xmc/en/users/xm-cloud/manage-personalization-and-analytics-for-sites.html) for the site.
     * This identifier lets you control analytics and personalization for the site.
     */
    posMappings?: Array<AnalyticsIdentifier> | null;
  };
  export type PageAggregationResponse = {
    /**
     * The page identifier.
     * Example value: 8f0b81bc-7388-46be-b109-6e73d1114470
     */
    id?: string | null;
    /**
     * The language of the page.
     * Example value: en-US
     */
    language?: string | null;
    /**
     * The page name.
     * Example value: Home
     */
    name?: string | null;
    /**
     * The display name of the page for the specified language.
     * Example value: Home
     */
    displayName?: string | null;
    /**
     * A collection of the page components.
     */
    components?: Array<ComponentAggregationResponse> | null;
  };
  /**
   * Page hierarchy response entity.
   */
  export type PageHierarchy = {
    page?: PageResponse;
    /**
     * Details of this page's children.
     */
    children?: Array<PageResponse> | null;
    /**
     * Details of this page's ancestors.
     */
    ancestors?: Array<PageResponse> | null;
    /**
     * Details of this page's siblings.
     */
    siblings?: Array<PageResponse> | null;
  };
  export type PageInsertOption = {
    /**
     * Template ID
     * Example value: 6fe7d655-1e3d-4c27-8010-5777f06c6c4f
     */
    id?: string | null;
    /**
     * Template display name
     * Example value: Page
     */
    displayName?: string | null;
  };
  export type PageLocking = {
    /**
     * If set to true, canUnlock gives you permission to unlock a Page entity.
     * Example value: False
     */
    canUnlock?: boolean;
    /**
     * If set to true, isLocked denotes that the Page entity has been locked.
     * Example value: False
     */
    isLocked?: boolean;
    /**
     * If the Page entity is locked, lockedBy provides information about which user locked the entity.
     * Example value: john.smith@skate-park.com
     */
    lockedBy?: string | null;
    /**
     * If set to true, lockedByCurrentUser denotes whether the Page entity was locked by the currently authenticated user.
     * Example value: False
     */
    lockedByCurrentUser?: boolean;
  };
  export type PageRequest = {
    /**
     * The identifier of the page.
     * Example value: 8f0b81bc-7388-46be-b109-6e73d1114470
     */
    id: string;
    /**
     * The language of the page.
     * Example value: en-US
     */
    language: string;
  };
  export type PageResponse = {
    /**
     * Insert options for the page.
     */
    insertOptions?: Array<PageInsertOption> | null;
    /**
     * Indicates whether the page has versions in the queried language.
     */
    hasVersions?: boolean;
    /**
     * Children of the page.
     */
    children?: Array<PageResponse> | null;
    /**
     * The identifier of the page.
     * Example value: 68900348a3b84eb8ac7df4d179c25727
     */
    id?: string | null;
    /**
     * The page's system name.
     * Example value: Home
     */
    name?: string | null;
    /**
     * The page's display name.
     * Example value: Site Home
     */
    displayName?: string | null;
    /**
     * The page language.
     * Example value: en-US
     */
    language?: string | null;
    /**
     * The current version of the page.
     * Example value: 1
     */
    version?: number;
    /**
     * The identifier of the template this page is based on.
     * Example value: 6fe7d6551e3d4c2780105777f06c6c4f
     */
    templateId?: string | null;
    /**
     * The identifier of the page's parent.
     * Example value: 4bc0c81a280b4b13890b7b074b9d68f4
     */
    parentId?: string | null;
    /**
     * If set to true, this page can be rendered in the XM Cloud Pages application. This endpoint is set to false for the root item of the site, as well as for the folders if there are any.
     * Example value: True
     */
    hasPresentation?: boolean;
    /**
     * Whether the page has any child pages.
     * Example value: True
     */
    hasChildren?: boolean;
    permissions?: Permissions;
    locking?: PageLocking;
    /**
     * The path for the page.
     * Example value: Sitecore/Content/Home/Categories/Products/MyProduct
     */
    path?: string | null;
  };
  export type PageVariantsAggregationResponse = {
    /**
     * Aggregated data of the currently active variants for this page.
     */
    pages?: Array<PageVariantsResponse> | null;
  };
  export type PageVariantsResponse = {
    /**
     * The identifier of the page.
     * Example value: 8f0b81bc-7388-46be-b109-6e73d1114470
     */
    pageId?: string | null;
    /**
     * The language of the page.
     * Example value: en-US
     */
    language?: string | null;
    /**
     * The list of page personalization variant identifiers.
     * Example value: [
     * "edc7cee9-14b5-4218-a7a8-13664c714bdb",
     * "5f457136-fd9f-4a5b-be3f-2d46709f01a4"
     * ]
     */
    variantIds?: Array<string> | null;
  };
  export type PagesAggregationResponse = {
    pages?: Array<PageAggregationResponse> | null;
  };
  /**
   * The access rights of the current user to the site.
   */
  export type Permissions = {
    /**
     * If set to true, canAdmin gives you admin rights. Being an admin means that you control access permissions for other users. The Administer access right requires Read and Write access rights.
     * Example value: False
     */
    canAdmin?: boolean;
    /**
     * If set to true, canWrite gives you permission to edit values. The canWrite access right requires the canRead access right.
     * Example value: False
     */
    canWrite?: boolean;
    /**
     * If set to true, canCreate gives you permission to create entities.
     * Example value: False
     */
    canCreate?: boolean;
    /**
     * If set to true, canDelete gives you permission to delete entities.
     * Example value: False
     */
    canDelete?: boolean;
    /**
     * If set to true, canRename gives you permission to rename entities.
     * Example value: False
     */
    canRename?: boolean;
    /**
     * If set to true, canRead gives you permission to see entities, including all their parameters.
     * Example value: False
     */
    canRead?: boolean;
    /**
     * If set to true, canPublish gives you permission to publish sites in this environment.
     * Example value: False
     */
    canPublish?: boolean;
    /**
     * If set to true, canDuplicate gives you permission to duplicate entities.
     * Example value: False
     */
    canDuplicate?: boolean;
  };
  export type ProblemDetails = {
    /**
     * The type of the error response entity.
     */
    type?: string | null;
    /**
     * The title of the error response entity.
     */
    title?: string | null;
    /**
     * The response status code.
     */
    status?: number | null;
    /**
     * A detailed explanation, specific to this occurrence of the problem.
     */
    detail?: string | null;
    /**
     * If available, a URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string | null;
    [key: string]:
      | unknown
      | (string | null)
      | (string | null)
      | (number | null)
      | (string | null)
      | (string | null)
      | undefined;
  };
  /**
   * Site collection rename request.
   */
  export type RenameSiteCollectionInput = {
    /**
     * The new system name for the site collection.
     * Example value: skate-brand-sites
     */
    systemName: string;
  };
  /**
   * A site rename request.
   */
  export type RenameSiteInput = {
    /**
     * The new name for the site.
     * Example value: new-site
     */
    name: string;
  };
  /**
   * The rendering host response entity.
   */
  export type RenderingHost = {
    /**
     * The rendering host ID.
     * Example value: 5aae1eeaea2440bf96f11f43da82c77b
     */
    id?: string | null;
    /**
     * The name of the rendering host.
     * Example value: Default
     */
    name?: string | null;
    /**
     * The name of the app.
     * Example value: Default
     */
    appName?: string | null;
    /**
     * The server side rendering engine configuration URL.
     * Example value: https://xmc-eh-uniqueid.sitecorecloud.io:443/api/editing/config
     */
    layoutServiceConfiguration?: string | null;
    /**
     * The server side rendering engine endpoint URL.
     * Example value: https://xmc-eh-uniqueid.sitecorecloud.io:443/api/editing/render
     */
    serverSideRenderingEngineEndpointUrl?: string | null;
    /**
     * The server side rendering engine application URL.
     * Example value: https://xmc-eh-uniqueid.sitecorecloud.io/
     */
    serverSideRenderingEngineApplicationUrl?: string | null;
  };
  /**
   * A site response entity.
   */
  export type Site = {
    /**
     * The identifier of the site.
     * Example value: 497f6eca-6276-4993-bfeb-53cbbbba6f08
     */
    id?: string | null;
    /**
     * The name of the site.
     * Example value: skate-park
     */
    name?: string | null;
    /**
     * The description of the site.
     * Example value: New site for Brand A in English-speaking countries
     */
    description?: string | null;
    /**
     * The display name of the site.
     * Example value: Skate Park Website
     */
    displayName?: string | null;
    thumbnail?: Thumbnail;
    /**
     * The identifier of the collection to which the site belongs.
     * Example value: 5aae1eeaea2440bf96f11f43da82c77b
     */
    collectionId?: string | null;
    /**
     * The date when the site was created.
     * Example value: 2019-08-24T14:15:22Z
     */
    created?: string;
    /**
     * The ID of the user who created the site.
     * Example value: L6kfw52ZVf
     */
    createdBy?: string | null;
    /**
     * Sort order of the site.
     * Example value: 100
     */
    sortOrder?: number | null;
    /**
     * The identifier of the brand kit associated with this site.
     * Example value: e3f1c5a2-4b6d-4a3e-9f1b-2d3c4b5a6e7f
     */
    brandKitId?: string | null;
    permissions?: Permissions;
    /**
     * The list of languages in use by the site.
     * Example value: [
     * "en-US",
     * "en-CA"
     * ]
     */
    languages?: Array<string> | null;
    /**
     * The list of hosts that the site resolves to.
     */
    hosts?: Array<Host> | null;
    /**
     * The list of languages supported by Sitecore.
     * Example value: [
     * "en-US",
     * "en-CA"
     * ]
     */
    supportedLanguages?: Array<string> | null;
    errorPagesConfiguration?: ErrorPagesConfiguration;
    /**
     * The settings for the site.
     */
    settings?: {
      [key: string]: string;
    } | null;
    /**
     * The read-only properties of the site.
     */
    properties?: {
      [key: string]: string;
    } | null;
  };
  /**
   * Site collection response entity.
   */
  export type SiteCollection = {
    /**
     * The identifier of the site collection.
     * Example value: 497f6eca-6276-4993-bfeb-53cbbbba6f08
     */
    id?: string | null;
    /**
     * The unique system name of the site collection.
     * Example value: skate-park-sites
     */
    name?: string | null;
    /**
     * The description of the site collection.
     * Example value: Collection for all Skate Park brand websites.
     */
    description?: string | null;
    /**
     * The display name of the site collection.
     * Example value: Skate Park Websites
     */
    displayName?: string | null;
    /**
     * Sort order of the site collection.
     * Example value: 100
     */
    sortOrder?: number | null;
    /**
     * The ID of the user who created the site collection.
     * Example value: L6kfw52ZVf
     */
    createdBy?: string | null;
    /**
     * The date when the site collection was created.
     * Example value: 2019-08-24T14:15:22Z
     */
    created?: string;
    permissions?: Permissions;
    /**
     * The site collection settings.
     */
    settings?: {
      [key: string]: string;
    } | null;
  };
  /**
   * The language settings of the host.
   */
  export type SiteLanguageSettings = {
    /**
     * The default language.
     * Example value: en
     */
    defaultLanguage?: string | null;
    /**
     * Whether language embedding is enabled.
     * Example value: False
     */
    languageEmbedding?: boolean | null;
    /**
     * Whether item language fallback is enabled.
     * Example value: False
     */
    itemLanguageFallback?: boolean | null;
    /**
     * Whether field language fallback is enabled.
     * Example value: False
     */
    fieldLanguageFallback?: boolean | null;
  };
  /**
   * Site template response entity.
   */
  export type SiteTemplate = {
    /**
     * The identifier of the site template.
     * Example value: {5AAE1EEA-EA24-40BF-96F1-1F43DA82C77B}
     */
    id?: string | null;
    /**
     * The name of the site template.
     * Example value: Basic
     */
    name?: string | null;
    /**
     * Indicates whenever the template is enabled.
     * Example value: True
     */
    enabled?: boolean;
    /**
     * The description of the site template.
     * Example value: An example of a simple website with homepage, subpage, navigation, and footer.
     */
    description?: string | null;
    /**
     * The summary of what pages, components, or integrations are included in the template.
     */
    contents?: Array<StringStringKeyValuePair> | null;
    /**
     * The author of the site template.
     */
    createdBy?: string | null;
    /**
     * The date of the last update.
     * Example value: 2019-08-24T14:15:22Z
     */
    updatedOn?: string;
    /**
     * The thumbnail of the site template.
     * Example value: https://customer-tenant.sitecorecloud.io/-/media/Feature/JSS-Experience-Accelerator/Basic-Site/template-thumbnail.png?w=176
     */
    thumbnail?: string | null;
    /**
     * Large resolution screenshot of the site template.
     * Example value: https://customer-tenant.sitecorecloud.io/-/media/Feature/JSS-Experience-Accelerator/Basic-Site/template-thumbnail.png
     */
    image?: string | null;
  };
  /**
   * Alternate link sitemap configuration.
   */
  export type SitemapAlternateLinksOptions = {
    /**
     * Whether alternate link generation is enabled. When enabled, xhtml:link elements are added to the URL elements in the sitemap.
     * Example value: True
     */
    enabled?: boolean | null;
    /**
     * Whether alternate links include an x-default link element. The x-default value signals to the search algorithm that the page does not target any specific language or region.
     * Example value: True
     */
    includeXDefault?: boolean | null;
  };
  /**
   * Sitemap caching configuration.
   */
  export type SitemapCacheOptions = {
    /**
     * Threshold in minutes for refreshing the sitemap cache.
     * Example value: 60
     */
    refreshThreshold?: number | null;
  };
  /**
   * Configuration settings for sitemap generation.
   */
  export type SitemapConfiguration = {
    /**
     * The identifier of the sitemap configuration item.
     * Example value: 2905a9c7-30b0-4d3f-bced-f1f9382c8041
     */
    id?: string | null;
    /**
     * Whether sitemap generation is enabled.
     * Example value: True
     */
    enabled?: boolean | null;
    /**
     * Maximum number of pages to include in a single sitemap file.
     * Example value: 1000
     */
    maxNumberOfPages?: number | null;
    alternateLinksOptions?: SitemapAlternateLinksOptions;
    urlOptions?: SitemapUrlOptions;
    cacheOptions?: SitemapCacheOptions;
    permissions?: Permissions;
  };
  /**
   * URL property configurations in the sitemap.
   */
  export type SitemapUrlOptions = {
    /**
     * Whether to include a change frequency attribute in the sitemap, that specifies how often the page changes its content.
     * Example value: True
     */
    includeChangeFreq?: boolean | null;
    /**
     * hether to include the last modification date in the sitemap.
     * Example value: True
     */
    includeLastMod?: boolean | null;
    /**
     * Whether to include priority information in the sitemap. The priority is a number between 0 and 1 that represents the importance of a page.
     * Example value: True
     */
    includePriority?: boolean | null;
  };
  /**
   * Sort collections request.
   */
  export type SortCollectionsInput = {
    /**
     * A collection containing collection IDs and sort order.
     */
    collections?: {
      [key: string]: number;
    } | null;
  };
  /**
   * Sort sites request.
   */
  export type SortSitesInput = {
    /**
     * A collection containing site IDs and sort order.
     */
    sites?: {
      [key: string]: number;
    } | null;
  };
  export type StringStringKeyValuePair = {
    key?: string | null;
    value?: string | null;
  };
  export type SupportedLanguage = {
    /**
     * The full name of the language.
     * Example value: de-DE
     */
    name?: string | null;
    /**
     * The english name of the language.
     * Example value: German (Germany)
     */
    englishName?: string | null;
    /**
     * The display name of the language.
     * Example value: German (Germany) : Deutsch (Deutschland)
     */
    displayName?: string | null;
    /**
     * The character encoding, that specifies how characters are represented in a document or web page.
     * Example value: iso-8859-1
     */
    charSet?: string | null;
    /**
     * The code of the page.
     * Example value: 65001
     */
    codePage?: string | null;
    /**
     * The encoding.
     * Example value: utf-8
     */
    encoding?: string | null;
    /**
     * The code for the language.
     * Example value: de
     */
    languageCode?: string | null;
    /**
     * The regional ISO code of the language. For example, US for the USA, or DK for Denmark.
     * Example value: DE
     */
    regionCode?: string | null;
  };
  /**
   * The thumbnail response entity.
   */
  export type Thumbnail = {
    /**
     * The URL of the image used as thumbnail.
     * Example value: https://xmc-customer-tenant.sitecorecloud.io/-/media/Project/sample-collection/sample-site/System/7/0/B/C/thumbnail_70BC64BDE257400E82BFDB3344797DB7.png
     */
    url?: string | null;
    /**
     * The path to the media folder where thumbnail images are stored.
     * Example value: sitecore/media library/Project/sample-collection/sample-site
     */
    rootPath?: string | null;
    /**
     * Indicates whether the thumbnail was autogenerated or manually uploaded.
     * Example value: True
     */
    autogenerated?: boolean;
  };
  /**
   * A host update request.
   */
  export type UpdateHostInput = {
    /**
     * Name of the host
     * Example value: skate-park
     */
    name?: string | null;
    /**
     * One or more hostnames.
     * Example value: [
     * "dev.skate-park.com",
     * "uat.skate-park.com"
     * ]
     */
    hostnames?: Array<string> | null;
    /**
     * The target hostname.
     * Example value: www.skate-park.com
     */
    targetHostname?: string | null;
    /**
     * The rendering host.
     * Example value: Default
     */
    renderingHost?: string | null;
    /**
     * The identifier of the home page.
     * Example value: 110d559fdea542ea9c1c8a5df7e70ef9
     */
    homePageId?: string | null;
    /**
     * The thumbnail information.
     */
    thumbnail?: string | null;
    /**
     * The list of analytics tracker identifiers mapped to the host, per language.
     */
    analyticsIdentifiers?: Array<AnalyticsIdentifier> | null;
    /**
     * The host settings collection.
     */
    settings?: {
      [key: string]: string;
    } | null;
    languageSettings?: SiteLanguageSettings;
  };
  /**
   * Update site collection request
   */
  export type UpdateSiteCollectionInput = {
    /**
     * Display name for the site collection.
     * Example value: Skate Brand Websites
     */
    displayName?: string | null;
    /**
     * Description of the site collection.
     * Example value: Example site collection description.
     */
    description?: string | null;
    /**
     * The name of the site collection.
     * Example value: 100
     */
    sortOrder?: number | null;
  };
  /**
   * A site update request.
   */
  export type UpdateSiteInput = {
    /**
     * The display name for the site.
     * Example value: Skate Park Site
     */
    displayName?: string | null;
    /**
     * The description for the site.
     * Example value: New site for Brand A in English-speaking countries.
     */
    description?: string | null;
    /**
     * The list of languages supported by Sitecore.
     * Example value: [
     * "en-US",
     * "en-CA"
     * ]
     */
    supportedLanguages?: Array<string> | null;
    /**
     * Indicates if the site should be marked as shared or not. True - site will be shared. False - site will not be marked as shared.
     * Example value: True
     */
    shared?: boolean | null;
    errorPages?: ErrorPages;
    /**
     * The sort order of the site.
     * Example value: 100
     */
    sortOrder?: number | null;
    /**
     * The identifier of the brand kit associated with this site.
     * Example value: e3f1c5a2-4b6d-4a3e-9f1b-2d3c4b5a6e7f
     */
    brandKitId?: string | null;
  };
  /**
   * A sitemap configuration update request
   */
  export type UpdateSitemapConfigurationInput = {
    /**
     * The identifier of the sitemap configuration item.
     * Example value: da570793-3539-4923-88ca-8314ddd193f7
     */
    id: string;
    /**
     * Indicates whether sitemap generation is enabled.
     * Example value: True
     */
    enabled?: boolean | null;
    /**
     * Maximum number of pages to include in a single sitemap file.
     * Example value: 1000
     */
    maxNumberOfPages?: number | null;
    alternateLinksOptions?: SitemapAlternateLinksOptions;
    urlOptions?: SitemapUrlOptions;
    cacheOptions?: SitemapCacheOptions;
  };
  export type UploadMediaOutput = {
    /**
     * The thumbnail image ID.
     * Example value: {5AAE1EEA-EA24-40BF-96F1-1F43DA82C77B}
     */
    id?: string | null;
    /**
     * Name of the uploaded image.
     * Example value: skate-park-screenshot
     */
    name?: string | null;
    /**
     * The path to the media folder where thumbnail images are stored.
     * Example value: sitecore/media library/Project/sample-collection/sample-site
     */
    itemPath?: string | null;
    /**
     * URL of the image to be used as the thumbnail.
     * Example value: https://xmc-customer-tenant.sitecorecloud.io/-/media/Project/sample-collection/sample-site/System/7/0/B/C/thumbnail_70BC64BDE257400E82BFDB3344797DB7.png
     */
    url?: string | null;
  };
  export type ValidateCollectionNameInput = {
    /**
     * The name of the site collection to validate.
     */
    name?: string | null;
  };
  /**
   * A site name validation request.
   */
  export type ValidateSiteNameInput = {
    /**
     * The name of the site to validate.
     * Example value: skate-park
     */
    name?: string | null;
  };
  /**
   * Represents the statistics for a workflow state.
   */
  export type WorkflowStateStatistics = {
    /**
     * The name of the workflow state.
     * Example value: Draft
     */
    name?: string | null;
    /**
     * The number of site pages that are currently in this workflow state.
     * Example value: 60
     */
    pageCount?: number;
  };
  /**
   * Represents the workflow statistics.
   */
  export type WorkflowStatistics = {
    /**
     * The name of the workflow.
     * Example value: Sample Workflow
     */
    name?: string | null;
    /**
     * A collection of states defined for the workflow, and the number of pages in each state.
     */
    states?: Array<WorkflowStateStatistics> | null;
  };
  /**
   * Represents the workflows statistics for a site.
   */
  export type WorkflowsStatistics = {
    /**
     * Collection of workflow statistics for the site.
     */
    workflows?: Array<WorkflowStatistics> | null;
  };
  export type ListLanguagesData = {
    body?: never;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/languages';
  };
  export type ListLanguagesErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
  };
  export type ListLanguagesError = ListLanguagesErrors[keyof ListLanguagesErrors];
  export type ListLanguagesResponses = {
    /**
     * Successful operation
     */
    200: Array<Language>;
  };
  export type ListLanguagesResponse = ListLanguagesResponses[keyof ListLanguagesResponses];
  export type CreateLanguageData = {
    /**
     * Input parameters
     */
    body: AddLanguageModel;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/languages';
  };
  export type CreateLanguageErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
  };
  export type CreateLanguageError = CreateLanguageErrors[keyof CreateLanguageErrors];
  export type CreateLanguageResponses = {
    /**
     * Successful operation
     */
    200: Language;
  };
  export type CreateLanguageResponse = CreateLanguageResponses[keyof CreateLanguageResponses];
  export type ListSupportedLanguagesData = {
    body?: never;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/languages/supported';
  };
  export type ListSupportedLanguagesErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
  };
  export type ListSupportedLanguagesError =
    ListSupportedLanguagesErrors[keyof ListSupportedLanguagesErrors];
  export type ListSupportedLanguagesResponses = {
    /**
     * Successful operation
     */
    200: Array<SupportedLanguage>;
  };
  export type ListSupportedLanguagesResponse =
    ListSupportedLanguagesResponses[keyof ListSupportedLanguagesResponses];
  export type ListPageVariantsData = {
    body?: never;
    path: {
      /**
       * The page identifier
       */
      pageId: string;
    };
    query: {
      /**
       * The page language
       */
      language: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/live/variants';
  };
  export type ListPageVariantsErrors = {
    /**
     * Page was not found from the provided identifier and language.
     */
    404: ProblemDetails;
  };
  export type ListPageVariantsError = ListPageVariantsErrors[keyof ListPageVariantsErrors];
  export type ListPageVariantsResponses = {
    /**
     * Live page personalization variant identifiers retrieved successfully.
     */
    200: Array<string>;
  };
  export type ListPageVariantsResponse = ListPageVariantsResponses[keyof ListPageVariantsResponses];
  export type GetLivePageStateData = {
    body?: never;
    path: {
      /**
       * The page identifier
       */
      pageId: string;
    };
    query: {
      /**
       * The page language
       */
      language: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/pages/{pageId}/live';
  };
  export type GetLivePageStateErrors = {
    /**
     * This page language version isn‚Äôt published to Edge.
     */
    404: ProblemDetails;
  };
  export type GetLivePageStateError = GetLivePageStateErrors[keyof GetLivePageStateErrors];
  export type GetLivePageStateResponses = {
    /**
     * The page is live and published to Edge.
     */
    200: unknown;
  };
  export type ListCollectionsData = {
    body?: never;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/collections';
  };
  export type ListCollectionsErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
  };
  export type ListCollectionsError = ListCollectionsErrors[keyof ListCollectionsErrors];
  export type ListCollectionsResponses = {
    /**
     * Success
     */
    200: Array<SiteCollection>;
  };
  export type ListCollectionsResponse = ListCollectionsResponses[keyof ListCollectionsResponses];
  export type CreateCollectionData = {
    /**
     * Input data containing name and the description of the site collection
     */
    body?: CreateSiteCollectionInput;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/collections';
  };
  export type CreateCollectionErrors = {
    /**
     * Invalid input format
     */
    400: ProblemDetails;
  };
  export type CreateCollectionError = CreateCollectionErrors[keyof CreateCollectionErrors];
  export type CreateCollectionResponses = {
    /**
     * Successful operation
     */
    200: string;
  };
  export type CreateCollectionResponse = CreateCollectionResponses[keyof CreateCollectionResponses];
  export type DeleteCollectionData = {
    body?: never;
    path: {
      /**
       * The identifier of the site collection.
       */
      collectionId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/collections/{collectionId}';
  };
  export type DeleteCollectionErrors = {
    /**
     * Invalid input format
     */
    400: ProblemDetails;
    /**
     * Collection not found
     */
    404: ProblemDetails;
  };
  export type DeleteCollectionError = DeleteCollectionErrors[keyof DeleteCollectionErrors];
  export type DeleteCollectionResponses = {
    /**
     * Successful operation
     */
    200: string;
  };
  export type DeleteCollectionResponse = DeleteCollectionResponses[keyof DeleteCollectionResponses];
  export type RetrieveCollectionData = {
    body?: never;
    path: {
      /**
       * The identifier of the site collection.
       */
      collectionId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/collections/{collectionId}';
  };
  export type RetrieveCollectionErrors = {
    /**
     * Invalid input format
     */
    400: ProblemDetails;
    /**
     * Collection not found
     */
    404: ProblemDetails;
  };
  export type RetrieveCollectionError = RetrieveCollectionErrors[keyof RetrieveCollectionErrors];
  export type RetrieveCollectionResponses = {
    /**
     * Successful operation
     */
    200: SiteCollection;
  };
  export type RetrieveCollectionResponse =
    RetrieveCollectionResponses[keyof RetrieveCollectionResponses];
  export type UpdateCollectionData = {
    /**
     * Input data containing name and the description of the site collection
     */
    body?: UpdateSiteCollectionInput;
    path: {
      /**
       * The identifier of the site collection.
       */
      collectionId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/collections/{collectionId}';
  };
  export type UpdateCollectionErrors = {
    /**
     * Invalid input format
     */
    400: ProblemDetails;
    /**
     * Collection not found
     */
    404: ProblemDetails;
  };
  export type UpdateCollectionError = UpdateCollectionErrors[keyof UpdateCollectionErrors];
  export type UpdateCollectionResponses = {
    /**
     * Successful operation
     */
    200: SiteCollection;
  };
  export type UpdateCollectionResponse = UpdateCollectionResponses[keyof UpdateCollectionResponses];
  export type GetFavoriteSitesData = {
    body?: never;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/favorites/sites';
  };
  export type GetFavoriteSitesErrors = {
    /**
     * One or more validation errors occurred.
     */
    400: ProblemDetails;
  };
  export type GetFavoriteSitesError = GetFavoriteSitesErrors[keyof GetFavoriteSitesErrors];
  export type GetFavoriteSitesResponses = {
    /**
     * Favorite sites retrieved successfully.
     */
    200: Array<Site>;
  };
  export type GetFavoriteSitesResponse = GetFavoriteSitesResponses[keyof GetFavoriteSitesResponses];
  export type AddFavoriteSiteData = {
    /**
     * The input model.
     */
    body: AddFavoriteSiteInput;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/favorites/sites';
  };
  export type AddFavoriteSiteErrors = {
    /**
     * One or more validation errors occurred.
     */
    400: ProblemDetails;
    /**
     * Provided site not found.
     */
    404: ProblemDetails;
  };
  export type AddFavoriteSiteError = AddFavoriteSiteErrors[keyof AddFavoriteSiteErrors];
  export type AddFavoriteSiteResponses = {
    /**
     * Successful operation.
     */
    200: string;
  };
  export type AddFavoriteSiteResponse = AddFavoriteSiteResponses[keyof AddFavoriteSiteResponses];
  export type ListJobsData = {
    body?: never;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/jobs';
  };
  export type ListJobsErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
  };
  export type ListJobsError = ListJobsErrors[keyof ListJobsErrors];
  export type ListJobsResponses = {
    /**
     * Successful operation
     */
    200: Array<Job>;
  };
  export type ListJobsResponse = ListJobsResponses[keyof ListJobsResponses];
  export type RetrieveJobData = {
    body?: never;
    path: {
      /**
       * The handle of the job. If you don‚Äôt know the handle of the job, first retrieve the list of site job statuses.
       */
      jobHandle: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/jobs/{jobHandle}/status';
  };
  export type RetrieveJobErrors = {
    /**
     * Job not found
     */
    404: ProblemDetails;
  };
  export type RetrieveJobError = RetrieveJobErrors[keyof RetrieveJobErrors];
  export type RetrieveJobResponses = {
    /**
     * Successful operation
     */
    200: Job;
  };
  export type RetrieveJobResponse = RetrieveJobResponses[keyof RetrieveJobResponses];
  export type AggregateLivePageVariantsData = {
    /**
     * The collection of pages (by their identifier and language) for which to get personalization variants.
     */
    body?: Array<PageRequest>;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/aggregation/pages/live/variants';
  };
  export type AggregateLivePageVariantsErrors = {
    /**
     * One or more validation errors occurred.
     */
    400: ProblemDetails;
  };
  export type AggregateLivePageVariantsError =
    AggregateLivePageVariantsErrors[keyof AggregateLivePageVariantsErrors];
  export type AggregateLivePageVariantsResponses = {
    /**
     * Live page personalization variants retrieved successfully.
     */
    200: PageVariantsAggregationResponse;
  };
  export type AggregateLivePageVariantsResponse =
    AggregateLivePageVariantsResponses[keyof AggregateLivePageVariantsResponses];
  export type AggregatePageDataData = {
    /**
     * The collection of pages, by their identifier and language, for which to get data.
     */
    body?: Array<PageRequest>;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/aggregation/pages';
  };
  export type AggregatePageDataErrors = {
    /**
     * One or more validation errors occurred.
     */
    400: ProblemDetails;
  };
  export type AggregatePageDataError = AggregatePageDataErrors[keyof AggregatePageDataErrors];
  export type AggregatePageDataResponses = {
    /**
     * Page details retrieved successfully.
     */
    200: PagesAggregationResponse;
  };
  export type AggregatePageDataResponse =
    AggregatePageDataResponses[keyof AggregatePageDataResponses];
  export type RenameCollectionData = {
    /**
     * Input object containing the new system name of the site collection.
     */
    body: RenameSiteCollectionInput;
    path: {
      /**
       * The identifier of the site collection.
       */
      collectionId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/collections/{collectionId}/rename';
  };
  export type RenameCollectionErrors = {
    /**
     * Invalid input format
     */
    400: ProblemDetails;
    /**
     * Collection not found
     */
    404: ProblemDetails;
  };
  export type RenameCollectionError = RenameCollectionErrors[keyof RenameCollectionErrors];
  export type RenameCollectionResponses = {
    /**
     * Successful operation
     */
    200: string;
  };
  export type RenameCollectionResponse = RenameCollectionResponses[keyof RenameCollectionResponses];
  export type SortCollectionsData = {
    /**
     * A _collections_ JSON object of key-value pairs where the collection ID (string) is the key and the sort order (integer) is the value.
     */
    body: SortCollectionsInput;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/collections/sort';
  };
  export type SortCollectionsErrors = {
    /**
     * One or more validation errors occurred
     */
    400: ProblemDetails;
    /**
     * One or more site collections could not be found from provided IDs
     */
    404: ProblemDetails;
  };
  export type SortCollectionsError = SortCollectionsErrors[keyof SortCollectionsErrors];
  export type SortCollectionsResponses = {
    /**
     * Site collections sort order updated successfully
     */
    204: void;
  };
  export type SortCollectionsResponse = SortCollectionsResponses[keyof SortCollectionsResponses];
  export type ValidateCollectionNameData = {
    /**
     * The site collection name to validate.
     */
    body: ValidateCollectionNameInput;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/collections/name/validate';
  };
  export type ValidateCollectionNameErrors = {
    /**
     * If the input is invalid, returns a ProblemDetails object.
     */
    400: ProblemDetails;
  };
  export type ValidateCollectionNameError =
    ValidateCollectionNameErrors[keyof ValidateCollectionNameErrors];
  export type ValidateCollectionNameResponses = {
    /**
     * Returns a NameValidationResult indicating the validation result.
     */
    200: NameValidationResult;
  };
  export type ValidateCollectionNameResponse =
    ValidateCollectionNameResponses[keyof ValidateCollectionNameResponses];
  export type DeleteLanguageData = {
    body?: never;
    path: {
      /**
       * Regional ISO code of the language to remove.
       */
      isoCode: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/languages/{isoCode}';
  };
  export type DeleteLanguageErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
  };
  export type DeleteLanguageError = DeleteLanguageErrors[keyof DeleteLanguageErrors];
  export type DeleteLanguageResponses = {
    /**
     * Successful operation
     */
    200: boolean;
  };
  export type DeleteLanguageResponse = DeleteLanguageResponses[keyof DeleteLanguageResponses];
  export type UpdateLanguageData = {
    /**
     * Input parameters
     */
    body: EditLanguageInput;
    path: {
      /**
       * Regional ISO code of the language to update
       */
      isoCode: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/languages/{isoCode}';
  };
  export type UpdateLanguageErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Not Found
     */
    404: Language;
  };
  export type UpdateLanguageError = UpdateLanguageErrors[keyof UpdateLanguageErrors];
  export type UpdateLanguageResponses = {
    /**
     * No Content
     */
    204: void;
  };
  export type UpdateLanguageResponse = UpdateLanguageResponses[keyof UpdateLanguageResponses];
  export type RemoveFavoriteSiteData = {
    body?: never;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/favorites/sites/{siteId}';
  };
  export type RemoveFavoriteSiteErrors = {
    /**
     * One or more validation errors occurred.
     */
    400: ProblemDetails;
    /**
     * Favorite site not found
     */
    404: ProblemDetails;
  };
  export type RemoveFavoriteSiteError = RemoveFavoriteSiteErrors[keyof RemoveFavoriteSiteErrors];
  export type RemoveFavoriteSiteResponses = {
    /**
     * Successful operation.
     */
    202: unknown;
  };
  export type ListSitesData = {
    body?: never;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites';
  };
  export type ListSitesErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
  };
  export type ListSitesError = ListSitesErrors[keyof ListSitesErrors];
  export type ListSitesResponses = {
    /**
     * Successful operation
     */
    200: Array<Site>;
  };
  export type ListSitesResponse = ListSitesResponses[keyof ListSitesResponses];
  export type CreateSiteData = {
    /**
     * Input model
     */
    body: NewSiteInput;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites';
  };
  export type CreateSiteErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
  };
  export type CreateSiteError = CreateSiteErrors[keyof CreateSiteErrors];
  export type CreateSiteResponses = {
    /**
     * Successful operation
     */
    200: string;
  };
  export type CreateSiteResponse = CreateSiteResponses[keyof CreateSiteResponses];
  export type DeleteSiteData = {
    body?: never;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
    };
    query?: {
      /**
       * If this is set to true, the site will be deleted even if it is published to Edge.
       */
      force?: boolean;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}';
  };
  export type DeleteSiteErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Site not found
     */
    404: ProblemDetails;
  };
  export type DeleteSiteError = DeleteSiteErrors[keyof DeleteSiteErrors];
  export type DeleteSiteResponses = {
    /**
     * Successful operation
     */
    200: string;
  };
  export type DeleteSiteResponse = DeleteSiteResponses[keyof DeleteSiteResponses];
  export type RetrieveSiteData = {
    body?: never;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}';
  };
  export type RetrieveSiteErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Site not found
     */
    404: ProblemDetails;
  };
  export type RetrieveSiteError = RetrieveSiteErrors[keyof RetrieveSiteErrors];
  export type RetrieveSiteResponses = {
    /**
     * Successful operation
     */
    200: Site;
  };
  export type RetrieveSiteResponse = RetrieveSiteResponses[keyof RetrieveSiteResponses];
  export type UpdateSiteData = {
    /**
     * Various site configuration properties
     */
    body?: UpdateSiteInput;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}';
  };
  export type UpdateSiteErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Site not found
     */
    404: ProblemDetails;
  };
  export type UpdateSiteError = UpdateSiteErrors[keyof UpdateSiteErrors];
  export type UpdateSiteResponses = {
    /**
     * Successful operation
     */
    200: Site;
  };
  export type UpdateSiteResponse = UpdateSiteResponses[keyof UpdateSiteResponses];
  export type CopySiteData = {
    /**
     * Input object containing the name and description of the new site
     */
    body: CopySiteInput;
    path: {
      /**
       * The identifier of the site you want to duplicate.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/copy';
  };
  export type CopySiteErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Site not found
     */
    404: ProblemDetails;
  };
  export type CopySiteError = CopySiteErrors[keyof CopySiteErrors];
  export type CopySiteResponses = {
    /**
     * Successful operation
     */
    200: string;
  };
  export type CopySiteResponse = CopySiteResponses[keyof CopySiteResponses];
  export type RenameSiteData = {
    /**
     * Input object containing new name of the site
     */
    body: RenameSiteInput;
    path: {
      /**
       * The identifier of the site you want to rename.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/rename';
  };
  export type RenameSiteErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Site not found
     */
    404: ProblemDetails;
  };
  export type RenameSiteError = RenameSiteErrors[keyof RenameSiteErrors];
  export type RenameSiteResponses = {
    /**
     * Successful operation
     */
    200: string;
  };
  export type RenameSiteResponse = RenameSiteResponses[keyof RenameSiteResponses];
  export type SortSitesData = {
    /**
     * A _sites_ JSON object of key-value pairs where the site ID (string) is the key and the sort order (integer) is the value.
     */
    body: SortSitesInput;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/sort';
  };
  export type SortSitesErrors = {
    /**
     * One or more validation errors occurred
     */
    400: ProblemDetails;
    /**
     * One or more sites could not be found from provided IDs
     */
    404: ProblemDetails;
  };
  export type SortSitesError = SortSitesErrors[keyof SortSitesErrors];
  export type SortSitesResponses = {
    /**
     * Sites sort order updated successfully
     */
    204: void;
  };
  export type SortSitesResponse = SortSitesResponses[keyof SortSitesResponses];
  export type ValidateSiteNameData = {
    /**
     * The site name to validate.
     */
    body: ValidateSiteNameInput;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/name/validate';
  };
  export type ValidateSiteNameErrors = {
    /**
     * If the input is invalid, returns a ProblemDetails object.
     */
    400: ProblemDetails;
  };
  export type ValidateSiteNameError = ValidateSiteNameErrors[keyof ValidateSiteNameErrors];
  export type ValidateSiteNameResponses = {
    /**
     * Returns a NameValidationResult indicating the validation result.
     */
    200: NameValidationResult;
  };
  export type ValidateSiteNameResponse = ValidateSiteNameResponses[keyof ValidateSiteNameResponses];
  export type ListTrackedSitesData = {
    body?: never;
    path: {
      /**
       * Analytics identifier.
       */
      analyticsIdentifier: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/analytics-identifiers/{analyticsIdentifier}';
  };
  export type ListTrackedSitesErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Identifier not found
     */
    404: ProblemDetails;
  };
  export type ListTrackedSitesError = ListTrackedSitesErrors[keyof ListTrackedSitesErrors];
  export type ListTrackedSitesResponses = {
    /**
     * Successful operation
     */
    200: Array<Site>;
  };
  export type ListTrackedSitesResponse = ListTrackedSitesResponses[keyof ListTrackedSitesResponses];
  export type ListCollectionSitesData = {
    body?: never;
    path: {
      /**
       * The identifier of the site collection.
       */
      collectionId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/collections/{collectionId}/sites';
  };
  export type ListCollectionSitesErrors = {
    /**
     * Invalid input format
     */
    400: ProblemDetails;
    /**
     * Collection not found
     */
    404: ProblemDetails;
  };
  export type ListCollectionSitesError = ListCollectionSitesErrors[keyof ListCollectionSitesErrors];
  export type ListCollectionSitesResponses = {
    /**
     * Successful operation
     */
    200: Array<Site>;
  };
  export type ListCollectionSitesResponse =
    ListCollectionSitesResponses[keyof ListCollectionSitesResponses];
  export type DetachAnalyticsIdentifierData = {
    /**
     * Input containing an array of site identifiers.
     */
    body: DetachFromSitesInput;
    path: {
      /**
       * Analytics identifier.
       */
      analyticsIdentifier: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/analytics-identifiers/{analyticsIdentifier}/detach';
  };
  export type DetachAnalyticsIdentifierErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Identifier not found
     */
    404: ProblemDetails;
  };
  export type DetachAnalyticsIdentifierError =
    DetachAnalyticsIdentifierErrors[keyof DetachAnalyticsIdentifierErrors];
  export type DetachAnalyticsIdentifierResponses = {
    /**
     * Success
     */
    200: boolean;
    /**
     * Successful operation
     */
    202: unknown;
  };
  export type DetachAnalyticsIdentifierResponse =
    DetachAnalyticsIdentifierResponses[keyof DetachAnalyticsIdentifierResponses];
  export type RetrieveSiteHierarchyData = {
    body?: never;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
    };
    query?: {
      /**
       * The ISO country-region language code for which to retrieve the hierarchy, for example: en-US, ar-AE.
       */
      language?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/hierarchy';
  };
  export type RetrieveSiteHierarchyErrors = {
    /**
     * Invalid input format
     */
    400: ProblemDetails;
    /**
     * Invalid site ID or root page ID
     */
    404: ProblemDetails;
  };
  export type RetrieveSiteHierarchyError =
    RetrieveSiteHierarchyErrors[keyof RetrieveSiteHierarchyErrors];
  export type RetrieveSiteHierarchyResponses = {
    /**
     * Site hierarchy retrieved successfully
     */
    200: PageHierarchy;
  };
  export type RetrieveSiteHierarchyResponse =
    RetrieveSiteHierarchyResponses[keyof RetrieveSiteHierarchyResponses];
  export type RetrievePageHierarchyData = {
    body?: never;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
      /**
       * Page identifier.
       */
      pageId: string;
    };
    query?: {
      /**
       * The ISO country-region language code for which to retrieve the hierarchy, for example: en-US, ar-AE.
       */
      language?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/hierarchy/{pageId}';
  };
  export type RetrievePageHierarchyErrors = {
    /**
     * Invalid input format
     */
    400: ProblemDetails;
    /**
     * Invalid site ID or page ID
     */
    404: ProblemDetails;
  };
  export type RetrievePageHierarchyError =
    RetrievePageHierarchyErrors[keyof RetrievePageHierarchyErrors];
  export type RetrievePageHierarchyResponses = {
    /**
     * Page hierarchy retrieved successfully
     */
    200: PageHierarchy;
  };
  export type RetrievePageHierarchyResponse =
    RetrievePageHierarchyResponses[keyof RetrievePageHierarchyResponses];
  export type ListPageAncestorsData = {
    body?: never;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
      /**
       * Page identifier.
       */
      pageId: string;
    };
    query?: {
      /**
       * The ISO country-region language code for which to retrieve the ancestors, for example: en-US, ar-AE.
       */
      language?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/hierarchy/{pageId}/ancestors';
  };
  export type ListPageAncestorsErrors = {
    /**
     * Invalid input format
     */
    400: ProblemDetails;
  };
  export type ListPageAncestorsError = ListPageAncestorsErrors[keyof ListPageAncestorsErrors];
  export type ListPageAncestorsResponses = {
    /**
     * List of retrieved ancestor pages
     */
    200: Array<PageResponse>;
  };
  export type ListPageAncestorsResponse =
    ListPageAncestorsResponses[keyof ListPageAncestorsResponses];
  export type ListPageChildrenData = {
    body?: never;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
      /**
       * Page identifier.
       */
      pageId: string;
    };
    query?: {
      /**
       * The ISO country-region language code for which to retrieve the children, for example: en-US, ar-AE.
       */
      language?: string;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/hierarchy/{pageId}/children';
  };
  export type ListPageChildrenErrors = {
    /**
     * Invalid input format
     */
    400: ProblemDetails;
  };
  export type ListPageChildrenError = ListPageChildrenErrors[keyof ListPageChildrenErrors];
  export type ListPageChildrenResponses = {
    /**
     * List of retrieved child pages
     */
    200: Array<PageResponse>;
  };
  export type ListPageChildrenResponse = ListPageChildrenResponses[keyof ListPageChildrenResponses];
  export type ListHostsData = {
    body?: never;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/hosts';
  };
  export type ListHostsErrors = {
    /**
     * One or more validation errors occurred
     */
    400: ProblemDetails;
  };
  export type ListHostsError = ListHostsErrors[keyof ListHostsErrors];
  export type ListHostsResponses = {
    /**
     * Hosts retrieved successfully
     */
    200: Array<Host>;
  };
  export type ListHostsResponse = ListHostsResponses[keyof ListHostsResponses];
  export type CreateHostData = {
    /**
     * The parameters of a host.
     */
    body: CreateHostInput;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/hosts';
  };
  export type CreateHostErrors = {
    /**
     * One or more validation errors occurred
     */
    400: ProblemDetails;
    /**
     * The host name is already in use
     */
    409: ProblemDetails;
  };
  export type CreateHostError = CreateHostErrors[keyof CreateHostErrors];
  export type CreateHostResponses = {
    /**
     * Host created successfully
     */
    201: Host;
  };
  export type CreateHostResponse = CreateHostResponses[keyof CreateHostResponses];
  export type DeleteHostData = {
    body?: never;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
      /**
       * The identifier of the host.
       */
      hostId: string;
    };
    query?: {
      /**
       * If this is set to true, the host will be deleted even if it is published to Edge.
       */
      force?: boolean;
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/hosts/{hostId}';
  };
  export type DeleteHostErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetails;
    /**
     * Invalid host ID
     */
    404: ProblemDetails;
  };
  export type DeleteHostError = DeleteHostErrors[keyof DeleteHostErrors];
  export type DeleteHostResponses = {
    /**
     * Host deleted successfully
     */
    202: unknown;
  };
  export type RetrieveHostData = {
    body?: never;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
      /**
       * The identifier of the host.
       */
      hostId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/hosts/{hostId}';
  };
  export type RetrieveHostErrors = {
    /**
     * One or more validation errors occurred
     */
    400: ProblemDetails;
    /**
     * Invalid host ID
     */
    404: ProblemDetails;
  };
  export type RetrieveHostError = RetrieveHostErrors[keyof RetrieveHostErrors];
  export type RetrieveHostResponses = {
    /**
     * Returns the host found by the host ID
     */
    200: Host;
  };
  export type RetrieveHostResponse = RetrieveHostResponses[keyof RetrieveHostResponses];
  export type UpdateHostData = {
    /**
     * New parameter values for the host.
     */
    body: UpdateHostInput;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
      /**
       * The identifier of the host.
       */
      hostId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/hosts/{hostId}';
  };
  export type UpdateHostErrors = {
    /**
     * One or more validation errors occurred
     */
    400: ProblemDetails;
    /**
     * Invalid host ID
     */
    404: ProblemDetails;
    /**
     * The host name is already in use
     */
    409: ProblemDetails;
  };
  export type UpdateHostError = UpdateHostErrors[keyof UpdateHostErrors];
  export type UpdateHostResponses = {
    /**
     * Host updated successfully
     */
    204: void;
  };
  export type UpdateHostResponse = UpdateHostResponses[keyof UpdateHostResponses];
  export type GetRenderingHostsData = {
    body?: never;
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/renderinghosts';
  };
  export type GetRenderingHostsErrors = {
    /**
     * Incorrect site ID format
     */
    400: ProblemDetails;
    /**
     * Site could not be found from the provided ID
     */
    404: ProblemDetails;
  };
  export type GetRenderingHostsError = GetRenderingHostsErrors[keyof GetRenderingHostsErrors];
  export type GetRenderingHostsResponses = {
    /**
     * Successful operation
     */
    200: Array<RenderingHost>;
  };
  export type GetRenderingHostsResponse =
    GetRenderingHostsResponses[keyof GetRenderingHostsResponses];
  export type ListSiteTemplatesData = {
    body?: never;
    path?: never;
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/templates';
  };
  export type ListSiteTemplatesErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
  };
  export type ListSiteTemplatesError = ListSiteTemplatesErrors[keyof ListSiteTemplatesErrors];
  export type ListSiteTemplatesResponses = {
    /**
     * Successful operation
     */
    200: Array<SiteTemplate>;
  };
  export type ListSiteTemplatesResponse =
    ListSiteTemplatesResponses[keyof ListSiteTemplatesResponses];
  export type UploadSiteThumbnailData = {
    body?: {
      ContentType?: string;
      ContentDisposition?: string;
      Headers?: {
        [key: string]: Array<string>;
      };
      Length?: number;
      Name?: string;
      FileName?: string;
    };
    path: {
      /**
       * The identifier of the site.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/upload-thumbnail';
  };
  export type UploadSiteThumbnailErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
    /**
     * Site not found
     */
    404: ProblemDetails;
  };
  export type UploadSiteThumbnailError = UploadSiteThumbnailErrors[keyof UploadSiteThumbnailErrors];
  export type UploadSiteThumbnailResponses = {
    /**
     * Successful operation
     */
    200: UploadMediaOutput;
  };
  export type UploadSiteThumbnailResponse =
    UploadSiteThumbnailResponses[keyof UploadSiteThumbnailResponses];
  export type RetrieveLocalizationStatisticsData = {
    body?: never;
    path: {
      /**
       * The site identifier.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/statistics/localization';
  };
  export type RetrieveLocalizationStatisticsErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
  };
  export type RetrieveLocalizationStatisticsError =
    RetrieveLocalizationStatisticsErrors[keyof RetrieveLocalizationStatisticsErrors];
  export type RetrieveLocalizationStatisticsResponses = {
    /**
     * Successful operation
     */
    200: LocalizationStatistics;
  };
  export type RetrieveLocalizationStatisticsResponse =
    RetrieveLocalizationStatisticsResponses[keyof RetrieveLocalizationStatisticsResponses];
  export type RetrieveSitemapConfigurationData = {
    body?: never;
    path: {
      /**
       * The site identifier.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/configuration/sitemap';
  };
  export type RetrieveSitemapConfigurationErrors = {
    /**
     * One or more validation errors occurred
     */
    400: ProblemDetails;
    /**
     * Site or sitemap configuration not found for the provided ID
     */
    404: ProblemDetails;
  };
  export type RetrieveSitemapConfigurationError =
    RetrieveSitemapConfigurationErrors[keyof RetrieveSitemapConfigurationErrors];
  export type RetrieveSitemapConfigurationResponses = {
    /**
     * Successful operation
     */
    200: SitemapConfiguration;
  };
  export type RetrieveSitemapConfigurationResponse =
    RetrieveSitemapConfigurationResponses[keyof RetrieveSitemapConfigurationResponses];
  export type UpdateSitemapConfigurationData = {
    /**
     * Configuration details of a sitemap.
     */
    body: UpdateSitemapConfigurationInput;
    path: {
      /**
       * The site identifier.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/configuration/sitemap';
  };
  export type UpdateSitemapConfigurationErrors = {
    /**
     * One or more validation errors occurred
     */
    400: ProblemDetails;
    /**
     * Site or sitemap configuration not found for the provided ID
     */
    404: ProblemDetails;
  };
  export type UpdateSitemapConfigurationError =
    UpdateSitemapConfigurationErrors[keyof UpdateSitemapConfigurationErrors];
  export type UpdateSitemapConfigurationResponses = {
    /**
     * Successful operation
     */
    200: SitemapConfiguration;
  };
  export type UpdateSitemapConfigurationResponse =
    UpdateSitemapConfigurationResponses[keyof UpdateSitemapConfigurationResponses];
  export type RetrieveWorkflowStatisticsData = {
    body?: never;
    path: {
      /**
       * The site identifier.
       */
      siteId: string;
    };
    query?: {
      /**
       * The Sitecore context ID.
       */
      sitecoreContextId?: string;
    };
    url: '/api/v1/sites/{siteId}/statistics/workflow';
  };
  export type RetrieveWorkflowStatisticsErrors = {
    /**
     * Bad request
     */
    400: ProblemDetails;
  };
  export type RetrieveWorkflowStatisticsError =
    RetrieveWorkflowStatisticsErrors[keyof RetrieveWorkflowStatisticsErrors];
  export type RetrieveWorkflowStatisticsResponses = {
    /**
     * Successful operation
     */
    200: WorkflowsStatistics;
  };
  export type RetrieveWorkflowStatisticsResponse =
    RetrieveWorkflowStatisticsResponses[keyof RetrieveWorkflowStatisticsResponses];
  export type ClientOptions = {
    baseUrl: 'https://example.com/authoring' | (string & {});
  };
}
