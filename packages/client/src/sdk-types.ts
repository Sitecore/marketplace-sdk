// Import shared types (e.g. User and ApplicationMetadata)
import { ApplicationContext, UserInfo } from '@sitecore-marketplace-sdk/core';

// --- Host state types ---

// Define the allowed app types
export type AppType = 'portal' | 'xmc:xmapps' | 'xmc:pages-contextview';

// Define the host state type based on the app type.
// For 'portal' state is null; for other app types, it is an object.
export type HostState<T extends AppType = AppType> = T extends 'portal'
  ? null
  : T extends 'xmc:xmapps'
    ? XmcXmAppsHostState
    : T extends 'xmc:pages-contextview'
      ? XmcPagesContextViewHostState
      : never;

export interface XmcXmAppsHostState {
  environment: string;
  language: string;
  [key: string]: any;
}

export interface XmcPagesContextViewHostState {
  organizationId?: string;
  xmCloudTenantInfo?: XmcPagesContextViewTenantInfo;
  userInfo?: XmcPagesContextViewUserInfo;
  [key: string]: any;
}

export interface XmcPagesContextViewTenantInfo {
  url?: string;
  gqlEndpointUrl?: string;
  cdpEmbeddedTenantId?: string;
  aiEmbeddedTenantID?: string;
  customerEnvironmentType?: string;
  environmentId?: string;
  environmentName?: string;
  projectId?: string;
  projectName?: string;
  regionCode?: string;
  [key: string]: any;
}

export interface XmcPagesContextViewUserInfo {
  name?: string;
  given_name?: string;
  family_name?: string;
  middle_name?: string;
  nickname?: string;
  preferred_username?: string;
  profile?: string;
  picture?: string;
  website?: string;
  email?: string;
  email_verified?: boolean;
  gender?: string;
  birthdate?: string;
  zoneinfo?: string;
  locale?: string;
  phone_number?: string;
  phone_number_verified?: boolean;
  address?: string;
  updated_at?: string;
  sub?: string;
  [key: string]: any;
}

// Application metadata type
export interface ApplicationMetadata {
  resources: Array<{
    contextId: string;
    tenantName: string;
    tenantId: string;
  }>;
  appId: string;
  appType: AppType;
}

// Define the NavBarItem interface
interface NavBarItem {
  label: string;
  link?: string;
  icon?: Element;
  subMenu?: NavBarItem[];
}

// Define the NavbarItemsProps interface
export interface NavbarItemsProps {
  appLogo: string;
  appName: string;
  menu: NavBarItem[];
  helpLinks: NavBarItem[];
}

// --- Sites and Pages types ---

export interface PagesContext {
  siteInfo?: PagesContextSiteInfo;
  pageInfo?: PagesContextPageInfo;
  [key: string]: any;
}

export interface PagesContextSiteInfo {
  id?: string;
  name?: string;
  description?: string;
  displayName?: string;
  thumbnail?: {
    url?: string;
    rootPath?: string;
    autogenerated?: boolean;
    [key: string]: any;
  };
  collectionId?: string;
  created?: string;
  createdBy?: string;
  sortOrder?: number;
  brandKitId?: string;
  permissions?: {
    canAdmin?: boolean;
    canWrite?: boolean;
    canCreate?: boolean;
    canDelete?: boolean;
    canRename?: boolean;
    canRead?: boolean;
    canPublish?: boolean;
    canDuplicate?: boolean;
    [key: string]: any;
  };
  languages?: string[];
  hosts?: any;
  supportedLanguages?: string[];
  errorPagesConfiguration?: any;
  settings?: {
    thumbnailsRootPath?: string;
    generateThumbnails?: string;
    [key: string]: any;
  };
  properties?: any;
  [key: string]: any;
}

interface PagesContextPageInfo {
  name?: string;
  id?: string;
  version?: number;
  versionName?: string;
  versions?: any;
  hasVersions?: boolean;
  revision?: string;
  updatedBy?: string;
  updatedDate?: string;
  displayName?: string;
  icon?: string;
  url?: string;
  path?: string;
  hasChildren?: boolean;
  children?: any;
  language?: string;
  template?: any;
  parent?: any;
  fields?: any;
  isFolder?: boolean;
  ancestors?: any;
  workflow?: any | null;
  isLatestPublishableVersion?: boolean;
  creationDate?: string;
  createdBy?: string;
  insertOptions?: any;
  permissions?: {
    canWrite?: boolean;
    canDelete?: boolean;
    canRename?: boolean;
    canCreate?: boolean;
    canPublish?: boolean;
    canWriteLanguage?: boolean;
    [key: string]: any;
  };
  locking?: any;
  publishing?: any;
  presentationDetails?: string;
  layoutEditingKind?: any;
  route?: string;
  [key: string]: any;
}

// --- Static mappings for queries and mutations ---

export interface QueryMap {
  'host.user': {
    params: void;
    response: UserInfo;
    subscribe: false;
  };
  'host.state': {
    params: void;
    // In a real implementation the response depends on the configured app type.
    // For now, we use the generic HostState type.
    response: HostState;
    subscribe: true;
  };
  'pages.context': {
    params: void;
    response: PagesContext;
    subscribe: true;
  };
  'application.context': {
    params: void;
    response: ApplicationContext;
    subscribe: false;
  };
  'host.route': {
    params: void;
    response: string;
    subscribe: false; // subscribe feature isn't working properly, setting subscribable to false
  };
}

export interface MutationMap {
  'pages.reloadCanvas': {
    params: void;
    response: void;
    subscribe: false;
  };
}

// Utility types for keys
export type QueryKey = keyof QueryMap;
export type MutationKey = keyof MutationMap;

export interface SDKModule {
  namespace: string;
  invokeOperation: (operationName: string, ...args: any[]) => any;
}
